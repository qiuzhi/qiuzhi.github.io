[{"categories":["玩乐随心"],"content":"随着在互联网VPS和家里软路由搭建了不少项目后，为了监控探活，及时通知报告，我物色到了一款叫uptime-kuma的服务监控面板。 ","date":"2024-02-21","objectID":"/posts/build-uptime-kuma/:0:0","tags":["VPS","Docker"],"title":"搭建uptime-kuma服务监控面板","uri":"/posts/build-uptime-kuma/"},{"categories":["玩乐随心"],"content":"一 简介 uptime-kuma是一款开源监控工具，类似于“Uptime Robot”，UI简洁美观，支持TCP/PING/HTTP监控等，支持多语言其中包括中文。当服务出现故障时，可自动通过 Telegram、Discord、Gotify、Slack、Pushover、Email (SMTP) 等多种服务发送通知消息。 项目地址：https://github.com/louislam/uptime-kuma ","date":"2024-02-21","objectID":"/posts/build-uptime-kuma/:1:0","tags":["VPS","Docker"],"title":"搭建uptime-kuma服务监控面板","uri":"/posts/build-uptime-kuma/"},{"categories":["玩乐随心"],"content":"二 Docker搭建 ","date":"2024-02-21","objectID":"/posts/build-uptime-kuma/:2:0","tags":["VPS","Docker"],"title":"搭建uptime-kuma服务监控面板","uri":"/posts/build-uptime-kuma/"},{"categories":["玩乐随心"],"content":"1 使用docker-compose 创建docker-compose.yml。 version: \"3.0\" services: uptime-kuma: image: louislam/uptime-kuma:latest container_name: uptime-kuma volumes: - ./data/:/app/data ports: - 3037:3001 restart: always 然后docker-compose up -d。 ","date":"2024-02-21","objectID":"/posts/build-uptime-kuma/:2:1","tags":["VPS","Docker"],"title":"搭建uptime-kuma服务监控面板","uri":"/posts/build-uptime-kuma/"},{"categories":["玩乐随心"],"content":"2 设置Telegram消息通知 2.1 设置TG消息通知 点击新增，创建监控项，填写 Bot Token 和 Chat ID 即可配置好 Telegram 消息通知。 2.2 解决国内部署无法发送TG通知的问题 2.2.1 CloudFlare workers创建workers const whitelist = [\"/bot1111111111:\"]; const tg_host = \"api.telegram.org\"; addEventListener('fetch', event =\u003e { event.respondWith(handleRequest(event.request)) }) function validate(path) { for (var i = 0; i \u003c whitelist.length; i++) { if (path.startsWith(whitelist[i])) return true; } return false; } async function handleRequest(request) { var u = new URL(request.url); u.host = tg_host; if (!validate(u.pathname)) return new Response('Unauthorized', { status: 403 }); var req = new Request(u, { method: request.method, headers: request.headers, body: request.body }); const result = await fetch(req); return result; } 2.2.2 修改uptime-kuma的代码 $ docker exec -it uptime-kuma /bin/bash $ apt-get update \u0026\u0026 apt-get install vim -y // 安装vim $ vim /app/src/components/notifications/Telegram.vue // 找到：api.telegram.org，将其替换成你的反代域名（就一处） $ vim /app/server/notification-providers/telegram.js // 找到：api.telegram.org，将其替换成你的反代域名（就一处） $ exit $ docker restart uptime-kuma ","date":"2024-02-21","objectID":"/posts/build-uptime-kuma/:2:2","tags":["VPS","Docker"],"title":"搭建uptime-kuma服务监控面板","uri":"/posts/build-uptime-kuma/"},{"categories":["玩乐随心"],"content":"三 参考资料 搭建uptime-kuma服务监控面板 ","date":"2024-02-21","objectID":"/posts/build-uptime-kuma/:3:0","tags":["VPS","Docker"],"title":"搭建uptime-kuma服务监控面板","uri":"/posts/build-uptime-kuma/"},{"categories":["胡思乱想"],"content":"原本不打算回老家过春节，但想着接下来两年春节更不确切会不会回，所以最后还是成行了。本文从回到信宜的第二天就想着要写，为了简单记录下过节的，实际到回广上班的第二天才陆续写完。 由于家里亲戚入住请吃席在前，小宝放假在后，而老人家又不想我们特意开车先送回老家，本是计划在广州过年的，又由于后续公司春节假期放早四天（含除夕），有了总共12天的假期，还是计划回老家过年，想着可以探探、热闹热闹，同时老家房子大点，住着当度假休息。 ","date":"2024-02-18","objectID":"/posts/2024-spring-festival/:0:0","tags":["春节","回家","茂名","信宜","锦衣","怀乡"],"title":"记2024春节","uri":"/posts/2024-spring-festival/"},{"categories":["胡思乱想"],"content":"年廿七 早上起床，吃完早餐，自驾车7:20出发回信宜，路上车不算多，挺顺利的，花费4小时11分回到信宜，下高速之后，中午饭在河堤那家甲天下羊肉火锅吃羊肉，还是那个味道，吃完就径直回到信宜的家。 下午参加公司远程会议，需要放假，但公司分休前三或者后三（我选前三），所有还是有需要的时候得远程接入，时长一小时结束，然后就投入清洁大军之中。 晚饭前洗了个车，街边找的60大洋，不是机洗，近年关这价格还是升起来了，平时30。 ","date":"2024-02-18","objectID":"/posts/2024-spring-festival/:0:1","tags":["春节","回家","茂名","信宜","锦衣","怀乡"],"title":"记2024春节","uri":"/posts/2024-spring-festival/"},{"categories":["胡思乱想"],"content":"年廿八 房子较大，抓紧时间搞卫生。 下午去了趟外母家，给送点年礼，难得回来一趟，多走动是应该的嘛，回来的路上花20块理发。 晚饭前舅妈送来自家包的粽子，真好食。 ","date":"2024-02-18","objectID":"/posts/2024-spring-festival/:0:2","tags":["春节","回家","茂名","信宜","锦衣","怀乡"],"title":"记2024春节","uri":"/posts/2024-spring-festival/"},{"categories":["胡思乱想"],"content":"年廿九 早上搞完房子卫生，亲戚、朋友送来鸡鸭， 下午公共卫生间的洗脸盆下水阀坏了，和爸外出五金店花20元买了个换上，效果比原来好多了，全家都十分满意。 晚上花40块上车Spotify巴基斯坦车，这国际级音乐APP值得推荐。 ","date":"2024-02-18","objectID":"/posts/2024-spring-festival/:0:3","tags":["春节","回家","茂名","信宜","锦衣","怀乡"],"title":"记2024春节","uri":"/posts/2024-spring-festival/"},{"categories":["胡思乱想"],"content":"年三十 把鸡、鸭都宰掉，下午开弄年晚饭，电视这天故障，笔记本接音响收看央视春晚，跟家人打着麻将守岁。 ","date":"2024-02-18","objectID":"/posts/2024-spring-festival/:0:4","tags":["春节","回家","茂名","信宜","锦衣","怀乡"],"title":"记2024春节","uri":"/posts/2024-spring-festival/"},{"categories":["胡思乱想"],"content":"年初一 吃饺子，派利是，开车兜县城一圈，中午回家吃粽子。 ","date":"2024-02-18","objectID":"/posts/2024-spring-festival/:0:5","tags":["春节","回家","茂名","信宜","锦衣","怀乡"],"title":"记2024春节","uri":"/posts/2024-spring-festival/"},{"categories":["胡思乱想"],"content":"年初二 早上早点宰鸡拜神，吃开年饭。 中午出发上锦衣老家，祠堂烧炮两封（60元/每封），原想在老房子地堂烧一封，奈何太过荒凉故放弃。 下午到怀乡小舅家去探亲，大家平平安安，生活也越来越好，吃完饭就回信宜。 ","date":"2024-02-18","objectID":"/posts/2024-spring-festival/:0:6","tags":["春节","回家","茂名","信宜","锦衣","怀乡"],"title":"记2024春节","uri":"/posts/2024-spring-festival/"},{"categories":["胡思乱想"],"content":"年初三 媳妇“休假”找朋友聚会去，我在家陪小宝午觉和玩游戏，下午洗澡吃饭时，媳妇回家加入“清煲”行动，合伙基本把过年剩菜清掉。 晚上朋友约到育龙湾打麻将，其中差点做成两盘十三幺，运气还不错。到1点半打完去宵夜，谈人生、谈变迁、谈进步、谈际遇，至3点回家睡觉。 ","date":"2024-02-18","objectID":"/posts/2024-spring-festival/:0:7","tags":["春节","回家","茂名","信宜","锦衣","怀乡"],"title":"记2024春节","uri":"/posts/2024-spring-festival/"},{"categories":["胡思乱想"],"content":"年初四 早上过禹神轩大舅家吃饭，两表妹出落更标致了，但就是还没结婚，大伙各种“催”，小宝跟着他表妹表弟接触玩《蛋仔派对》。 中午吃完家，小宝带着他表妹表弟到自家玩Switch。 下午就去了外母家探亲食饭，除二姐外其它人都到了，大家喜气洋洋，各种逗利是派利是，小孩子更是“蛋仔”不断。 ","date":"2024-02-18","objectID":"/posts/2024-spring-festival/:0:8","tags":["春节","回家","茂名","信宜","锦衣","怀乡"],"title":"记2024春节","uri":"/posts/2024-spring-festival/"},{"categories":["胡思乱想"],"content":"年初五 恭贺二表兄新家入住满月，于好年华设宴吃席。 ","date":"2024-02-18","objectID":"/posts/2024-spring-festival/:0:9","tags":["春节","回家","茂名","信宜","锦衣","怀乡"],"title":"记2024春节","uri":"/posts/2024-spring-festival/"},{"categories":["胡思乱想"],"content":"年初六 收搭大件物品，宅家休息充足，准备回程。 ","date":"2024-02-18","objectID":"/posts/2024-spring-festival/:0:10","tags":["春节","回家","茂名","信宜","锦衣","怀乡"],"title":"记2024春节","uri":"/posts/2024-spring-festival/"},{"categories":["胡思乱想"],"content":"年初七 起了个大早，4点半起床边收拾边吃早餐，6点出门，正式启程回广州，从丁堡入口上高速，进平塘服务区，中间拐汕湛高速从云浮下高速走国道避开深岑高速极度拥堵路段，从佛山高明再上高速，12点进松岗服务区休息吃粽子充饥，然后14点平安到广州的家，总花费8个小时。 慢其实并不是事故引起的，主要是车多，加上不知道是不是新手多，不敢开高速，前边没车都不开，还有两车道两台车并排慢悠悠的开的情况，导致跟车多，特别是每个隧道前必是超级慢速。 ","date":"2024-02-18","objectID":"/posts/2024-spring-festival/:0:11","tags":["春节","回家","茂名","信宜","锦衣","怀乡"],"title":"记2024春节","uri":"/posts/2024-spring-festival/"},{"categories":["胡思乱想"],"content":"年初八 早起在家早餐，就约上朋友去荔湾新开的竹溪好运酒家吃午饭，然后逛海珠湖公园，逛完回家。 ","date":"2024-02-18","objectID":"/posts/2024-spring-festival/:0:12","tags":["春节","回家","茂名","信宜","锦衣","怀乡"],"title":"记2024春节","uri":"/posts/2024-spring-festival/"},{"categories":["胡思乱想"],"content":"年初九 回公司上班第一天，果然人不多，但相熟的几个同事也是今天回，还是有聊兴的。 上车币安的新春16U红包活动。 微信和媳妇聊天，媳妇说走的路多腿累，我就寻思着“献殷勤”，准点下班打卡去接媳妇，被媳妇夸了一通，舒服。 ","date":"2024-02-18","objectID":"/posts/2024-spring-festival/:0:13","tags":["春节","回家","茂名","信宜","锦衣","怀乡"],"title":"记2024春节","uri":"/posts/2024-spring-festival/"},{"categories":["胡思乱想"],"content":"年初十 加油、洗车，公司到岗人也多了不少，我也终是把这个流水账写完。 初来人间不知苦，潦草半生一身无。 转身回望来时路，才知生时为何哭。 皆是红尘悲伤客，莫笑谁是可怜人。 此生愿为无心人，来世绝不入凡尘。 ","date":"2024-02-18","objectID":"/posts/2024-spring-festival/:0:14","tags":["春节","回家","茂名","信宜","锦衣","怀乡"],"title":"记2024春节","uri":"/posts/2024-spring-festival/"},{"categories":["玩乐随心"],"content":"前期安装的CentOS，专门拿来挂机跑青龙、机器人等项目，当时估算的磁盘分配少了，监控程序一直处于黄色告警，虽然不影响正常使用，但有空还是处理下为好，正常的资源利用率更有利于系统稳定运行。 ","date":"2023-12-20","objectID":"/posts/centos-disk-expansion/:0:0","tags":["ESXi","CentOS","扩容","图床","Shortcodes"],"title":"记一次CentOS磁盘扩容操作","uri":"/posts/centos-disk-expansion/"},{"categories":["玩乐随心"],"content":"引言 LVM概述 在 Linux 系统中，我们经常使用 LVM （逻辑卷管理）的方式去管理和使用磁盘， LVM 可以动态扩容，给我们的使用带来了很多的便捷性。 LVM结构图如下： LVM结构图 物理卷（Physical Volume，PV） 指磁盘分区或从逻辑上与磁盘分区具有同样功能的设备（如RAID），是LVM的基本存储逻辑块，但和基本的物理存储介质（如分区、磁盘等）比较，却包含有与LVM相关的管理参数。 卷组（Volume Group，VG） 类似于非LVM系统中的物理磁盘，其由一个或多个物理卷PV组成。可以在卷组上创建一个或多个LV（逻辑卷）。 逻辑卷（Logical Volume，LV） 类似于非LVM系统中的磁盘分区，逻辑卷建立在卷组VG之上。在逻辑卷LV之上可以建立文件系统（比如/home或者/usr等）。 ","date":"2023-12-20","objectID":"/posts/centos-disk-expansion/:1:0","tags":["ESXi","CentOS","扩容","图床","Shortcodes"],"title":"记一次CentOS磁盘扩容操作","uri":"/posts/centos-disk-expansion/"},{"categories":["玩乐随心"],"content":"CentOS实操 下边主要通过截图记录本次操作，以便回顾关键点。 ","date":"2023-12-20","objectID":"/posts/centos-disk-expansion/:2:0","tags":["ESXi","CentOS","扩容","图床","Shortcodes"],"title":"记一次CentOS磁盘扩容操作","uri":"/posts/centos-disk-expansion/"},{"categories":["玩乐随心"],"content":"一 ESXi修改磁盘大小 打开ESXi中需要增加的虚拟机配置界面，直接修改硬盘大小（下图红框所示），点击保存，然后重启虚拟机即可。 至此，ESXi操作完毕。 ","date":"2023-12-20","objectID":"/posts/centos-disk-expansion/:2:1","tags":["ESXi","CentOS","扩容","图床","Shortcodes"],"title":"记一次CentOS磁盘扩容操作","uri":"/posts/centos-disk-expansion/"},{"categories":["玩乐随心"],"content":"二 CentOS扩容 使用SSH终端连接CentOS操作后续步骤。 核心思想：使用增加的磁盘空间创建一个新PV，跟原有的PV接接，整合到同一个LV上去，完成扩容。 观察系统是否正常识别需要扩容的空间 使用lsblk查看磁盘分配情况 使用fdisk -l确认 fdisk -l |grep /dev/sda 在ESXi增加了磁盘大小重启后，再次使用lsblk 可以看到，sda总大小为64G，较原有的20G多了44G。 对新增加的空间进行分区格式化 使用fdisk命令启动格式化 fdisk /dev/sda 完成上述命令后，可观察终端输出，一般可能出现一些WARNING，说系统繁忙，我们直接重启虚拟机，能正常进入即成功。 新建PV 使用pvs查看PV 创建新PVpvcreate pvcreate /dev/sda3 再次pvs确认 将新PV加入到VG 使用vgs查看VG 使用vgextend进行增加 vgextend centos /dev/sda3 再次vgs确认 扩容LV 使用lvs查看LV 扩容43G空间到LV lvextend -L +43G /dev/centos/root 当初实际在ESXi加的是44G，但经过分区格式化后是不足44G的，在这里磁盘是有损耗的，一定要注意参数不要直接写44G，我们可以通过再加1G验证 lvextend -L +1G /dev/centos/root 这次改用lvdisplay可以查看确认更详细的信息 可以看到root下空间增至60G，扩容成功。 刷新文件系统信息 本次CentOS使用的是XFS文件系统，所以使用xfs_growfs刷新；若是EXT文件系统就要用resize2fs命令；可以通过lsblk -f或cat /etc/fstab查看文件系统。 xfs_growfs /dev/centos/root reboot后重新进入，通过df -h查看系统空间情况，确认扩容成功。 至此，本次扩容完成。 ","date":"2023-12-20","objectID":"/posts/centos-disk-expansion/:2:2","tags":["ESXi","CentOS","扩容","图床","Shortcodes"],"title":"记一次CentOS磁盘扩容操作","uri":"/posts/centos-disk-expansion/"},{"categories":["玩乐随心"],"content":"总结 回顾此次操作，整体较为顺利，ESXi稳定好折腾再次被验证，搞清楚底层逻辑是实践的基石，能达到一点即通，多谢大佬Frank的远程指导操作，让我更深刻学习Linux基础，收益甚多！ ","date":"2023-12-20","objectID":"/posts/centos-disk-expansion/:3:0","tags":["ESXi","CentOS","扩容","图床","Shortcodes"],"title":"记一次CentOS磁盘扩容操作","uri":"/posts/centos-disk-expansion/"},{"categories":["玩乐随心"],"content":"参考 LV扩容(lvextend) ","date":"2023-12-20","objectID":"/posts/centos-disk-expansion/:4:0","tags":["ESXi","CentOS","扩容","图床","Shortcodes"],"title":"记一次CentOS磁盘扩容操作","uri":"/posts/centos-disk-expansion/"},{"categories":["玩乐随心"],"content":"网上看了几篇对于Linux使用密钥登录的好文章，这里合并做个备用，如有系统安全类需求，这是一个很好的参考思路。 ","date":"2023-12-12","objectID":"/posts/linux-key-login/:0:0","tags":["VPS","Linux","安全","登录"],"title":"Linux设置密钥登陆","uri":"/posts/linux-key-login/"},{"categories":["玩乐随心"],"content":"方案一：传统做法 转载：【有序集合】Linux设置密钥登陆 首先在家目录下创建 authorized_keys 用于存放公钥，如果已有该文件可跳过 mkdir .ssh touch .ssh/authorized_keys 在 authorized_keys 文件中添加公钥，并修改文件权限 chmod 600 .ssh/authorized_keys chmod 700 .ssh 编辑 /etc/ssh/sshd_config 文件，进行如下设置： RSAAuthentication yes PubkeyAuthentication yes 另外，请留意 root 用户能否通过 SSH 登录： PermitRootLogin yes 当你完成全部设置，并以密钥方式登录成功后，再禁用密码登录： PasswordAuthentication no 最后，重启 SSH 服务： service sshd restart ","date":"2023-12-12","objectID":"/posts/linux-key-login/:1:0","tags":["VPS","Linux","安全","登录"],"title":"Linux设置密钥登陆","uri":"/posts/linux-key-login/"},{"categories":["玩乐随心"],"content":"方案二：一键配置脚本 转载：【P3TERX ZONE】SSH 密钥一键配置脚本 使用教程 对于新入手或重装后的 VPS 配置密钥登录需要创建 ~/.ssh 目录、把公钥写入到 ~/.ssh/authorized_keys、设置权限、禁用密码登录等操作，虽然都是很简单的基础操作，但过程麻烦且枯燥： mkdir -p ~/.ssh curl -fsSL https://github.com/P3TERX.keys \u003e\u003e ~/.ssh/authorized_keys chmod 700 ~/.ssh chmod 600 ~/.ssh/authorized_keys sudo sed -i \"s@.*\\(PasswordAuthentication \\).*@\\1no@\" /etc/ssh/sshd_config sudo service sshd restart SSH 密钥一键配置脚本是一套用于简化 SSH 密钥配置过程的解决方案。使用它以上操作只需要一行命令： bash \u003c(curl -fsSL git.io/key.sh) -g P3TERX -d ","date":"2023-12-12","objectID":"/posts/linux-key-login/:2:0","tags":["VPS","Linux","安全","登录"],"title":"Linux设置密钥登陆","uri":"/posts/linux-key-login/"},{"categories":["玩乐随心"],"content":"语法及选项说明 bash \u003c(curl -fsSL git.io/key.sh) [选项...] \u003c参数\u003e -o - 覆盖模式，必须写在最前面才会生效 -g - 从 GitHub 获取公钥，参数为 GitHub 用户名 -u - 从 URL 获取公钥，参数为 URL -f - 从本地文件获取公钥，参数为本地文件路径 -p - 修改 SSH 端口，参数为端口号 -d - 禁用密码登录 ","date":"2023-12-12","objectID":"/posts/linux-key-login/:2:1","tags":["VPS","Linux","安全","登录"],"title":"Linux设置密钥登陆","uri":"/posts/linux-key-login/"},{"categories":["玩乐随心"],"content":"使用方法 生成 SSH 密钥对 如果没有密钥需要先生成，执行以下命令后一路回车即可。 ssh-keygen -t ecdsa -b 521 TIPS： 此方法适用于 Win­dows 10 (1803后)的 Pow­er­Shell 或 WSL，Linux 发行版和 ma­cOS 自带的终端，但不仅限于这些环境。 科普： 521 位的 ECDSA 密钥比起 RSA 密钥更安全且验证速度更快。 操作完后会在 ~/.ssh 目录中生两个密钥文件，id_ecdsa 为私钥，id_ecdsa.pub 为公钥。公钥就是我们需要安装在远程主机上的。 科普：~符号代表用户主目录，俗称家目录。其路径与当前登陆的用户有关，在 Linux 中普通用户家目录的路径是/home/用户名，而 root 用户是/root。Win­dows 10 中路径是C:\\Users\\用户名。在 ma­cOS 中路径是/Users/用户名。 安装公钥 从 GitHub 获取公钥 在 GitHub 密钥管理页面 添加公钥，比如我的用户名是 P3TERX，那么在主机上输入以下命令即可： bash \u003c(curl -fsSL git.io/key.sh) -g P3TERX 从 URL 获取公钥 把公钥上传到网盘，通过网盘链接获取公钥： bash \u003c(curl -fsSL git.io/key.sh) -u https://p3terx.com/key.pub 从本地文件获取公钥 通过 FTP 的方式把公钥传到 VPS 上，然后指定公钥路径： bash \u003c(curl -fsSL git.io/key.sh) -f ~/key.pub 覆盖模式 使用覆盖模式（-o）将覆盖 /.ssh/authorized_keys 文件，之前的密钥会被完全替换掉，选项必须写在最前面才会生效，比如： bash \u003c(curl -fsSL git.io/key.sh) -o -g P3TERX 或者 bash \u003c(curl -fsSL git.io/key.sh) -og P3TERX 禁用密码登录 在确定使用密钥能正常登录后禁用密码登录： bash \u003c(curl -fsSL git.io/key.sh) -d 修改 SSH 端口 把 SSH 端口修改为 2222： bash \u003c(curl -fsSL git.io/key.sh) -p 2222 一键操作 安装密钥、修改端口、禁用密码登录一键操作： bash \u003c(curl -fsSL git.io/key.sh) -og P3TERX -p 2222 -d ","date":"2023-12-12","objectID":"/posts/linux-key-login/:2:2","tags":["VPS","Linux","安全","登录"],"title":"Linux设置密钥登陆","uri":"/posts/linux-key-login/"},{"categories":null,"content":"基本資訊 - nickname: 枫 avatar: https://blog.iqzhi.com/images/avatar.jpg url: https://blog.iqzhi.com description: 秋至枫必落，曲终人定散，物还在，人却非。 ","date":"2023-11-20","objectID":"/friends/:1:0","tags":null,"title":"友情链接","uri":"/friends/"},{"categories":null,"content":"友情提醒 Notice 互换友链请按以上格式在评论留言。（仅限个人非商业博客/网站）  网站失效、停止维护、内容不当都可能被取消链接！ 那些不尊重他人劳动成果，转载不加出版的，或恶意行为的网站，还请您不要来进行交换了。 ","date":"2023-11-20","objectID":"/friends/:2:0","tags":null,"title":"友情链接","uri":"/friends/"},{"categories":null,"content":"不能等，想起就要写。 ","date":"2023-11-15","objectID":"/history/:0:0","tags":null,"title":"历程","uri":"/history/"},{"categories":null,"content":"ToDoList 建站日志时间线展示 梳理网站目录，考虑路径、分类、标签的关系 留言 给文章《OpenWrt + OpenClash + AdGuard Home 打造家庭专用网络》增加些图例 研究CDN给博客加速，附带图例 ","date":"2023-11-15","objectID":"/history/:0:1","tags":null,"title":"历程","uri":"/history/"},{"categories":null,"content":"2023-11-20 增加友链。 ","date":"2023-11-15","objectID":"/history/:0:2","tags":null,"title":"历程","uri":"/history/"},{"categories":null,"content":"2016-04-28 博客使用Hexo框架。 ","date":"2023-11-15","objectID":"/history/:0:3","tags":null,"title":"历程","uri":"/history/"},{"categories":["胡思乱想"],"content":"一年一度的双11来了，你又在买什么？ 不知道从什么时候开始，一年里有几个购物节，总得败手。比如“618”、“双十一”，国人似乎形成了思维惯性，总是觉得这天的货品是最便宜的。对比国外的“黑五”，让人购物的那股子兴奋劲无法掩饰，难以自拔。 殊不知，这些日子也是商家最高兴的日子，疯狂“割韭菜”，而平台，更是“盘满钵满”。终究，相对平常，降价力度还是“可圈可点”的。 应景之下，我也买了不少： 喵云 HKT-Nat 1C 512M 10GSSD 共享300Mbps 2T流量 共享IPv4 10转发 五折 月付¥6.45 狗云 HK-MG-A 1C 1G 20G 500Mbps 1T流量 1IPv4 2IPv6 七折 年付¥70 58收 科学1 小杯 188G流量 年¥34.80 科学2 一次性（小） 150G流量 每年重置 早鸟计划 ¥14.90 EUserv VS2-free v2.1 1C 1G 10GHDD 1Gbps 1T流量 1IPv6 TG找人代付 ¥16.50 计划趁国外黑五，再上一台服务器玩，关注CC、RN中。 其中我又得到了什么乐趣呢？我总是在反问，或许是想着便宜，不剁手对不起知道这样的资讯。 机器有了，能折腾的空间也更多了，可以部署一些程序玩下，其实外边的成品服务还是很贵的，很多都能找到开源自建方案，更有成就感。 ","date":"2023-11-11","objectID":"/posts/20231111-thoughts/:0:0","tags":["双十一","黑五"],"title":"20231111思","uri":"/posts/20231111-thoughts/"},{"categories":["玩乐随心"],"content":"物尽其用，刚好雨云免费的宝塔面板可以绑定两个域名，一个用作博客备站，另一个刚好可以玩下Tiny Tiny RSS。 官网最新教程已然推荐使用docker进行安装了，但雨云的虚拟主机无法安装docker，只能使用源码安装，好在基础环境宝塔面板还是简化了些操作，但是由于多年更新，此种安装方式官方wiki也不再更新，导致还是碰上了很多坑，一路坑一路填，居然成功了。 ","date":"2023-10-27","objectID":"/posts/bt-install-tt-rss/:0:0","tags":["宝塔面板","tt-rss"],"title":"宝塔面板安装Tiny Tiny RSS","uri":"/posts/bt-install-tt-rss/"},{"categories":["玩乐随心"],"content":"宝塔面板新建站点 面站 -\u003e PHP项目 -\u003e 添加站点，确定文件目录，选用PHP7.4版本 软件商店 -\u003e PHP-7.4 -\u003e 安装扩展fileinfo ","date":"2023-10-27","objectID":"/posts/bt-install-tt-rss/:1:0","tags":["宝塔面板","tt-rss"],"title":"宝塔面板安装Tiny Tiny RSS","uri":"/posts/bt-install-tt-rss/"},{"categories":["玩乐随心"],"content":"Tiny Tiny RSS wiki 按教程，先下载源码。 git clone https://git.tt-rss.org/fox/tt-rss.git tt-rss 配置config.php 网上某些教程说可以访问/install路径进行数据库配置安装，但访问后报了404，那些教程已然落后了。 cp config.php-dist config.php # 追加 putenv('TTRSS_DB_TYPE=mysql'); putenv('TTRSS_DB_PORT=3306'); putenv('TTRSS_DB_HOST=dbhost'); putenv('TTRSS_DB_NAME=dbname'); putenv('TTRSS_DB_USER=dbuser'); putenv('TTRSS_DB_PASS=dbpassword'); putenv('TTRSS_SELF_URL_PATH=https://example.com/tt-rss'); 安装数据库 php ./update.php --update-schema 理论上，做完这些，你就可以在相应网址看到Tiny Tiny RSS首页了。 but，WTF！！！ 我遇到了下列一系列的坑。 ","date":"2023-10-27","objectID":"/posts/bt-install-tt-rss/:2:0","tags":["宝塔面板","tt-rss"],"title":"宝塔面板安装Tiny Tiny RSS","uri":"/posts/bt-install-tt-rss/"},{"categories":["玩乐随心"],"content":"踩坑过程 ","date":"2023-10-27","objectID":"/posts/bt-install-tt-rss/:3:0","tags":["宝塔面板","tt-rss"],"title":"宝塔面板安装Tiny Tiny RSS","uri":"/posts/bt-install-tt-rss/"},{"categories":["玩乐随心"],"content":"坑一：PHP多版本共存 宝塔面板有两个版本的PHP，默认是更高的8以上版本，可能不支持！ PHP Fatal error: Uncaught Error: Call to undefined function putenv() in /www/wwwroot/rss.izhi.tk/config.php:3 Stack trace: #0 /www/wwwroot/rss.izhi.tk/include/functions.php(29): require_once() #1 /www/wwwroot/rss.izhi.tk/update.php(11): require_once('...') #2 {main} thrown in /www/wwwroot/rss.izhi.tk/config.php on line 3 指定php命令版本 /www/server/php/74/bin/php ./update.php --update-schema ","date":"2023-10-27","objectID":"/posts/bt-install-tt-rss/:3:1","tags":["宝塔面板","tt-rss"],"title":"宝塔面板安装Tiny Tiny RSS","uri":"/posts/bt-install-tt-rss/"},{"categories":["玩乐随心"],"content":"坑二：函数 putenv 过期 Exception while creating PDO object:could not find driver PHP Warning: putenv() has been disabled for security reasons in /www/wwwroot/xxx.tk/config.php on line 3 从日志可以看出，配置方式过时了，未生效，tt-rss使用了默认的PostgreSQL数据库，由于PHP未安装pgsql扩展而报未找到驱动错误。 两种处理方式，我使用1可以解决，第2种后边在网上找到，未验证： 直接在classes/Confing.php中配置默认值 private const _DEFAULTS = [ Config::DB_TYPE =\u003e [ \"pgsql\", Config::T_STRING ], Config::DB_HOST =\u003e [ \"db\", Config::T_STRING ], Config::DB_USER =\u003e [ \"\", Config::T_STRING ], Config::DB_NAME =\u003e [ \"\", Config::T_STRING ], Config::DB_PASS =\u003e [ \"\", Config::T_STRING ], Config::DB_PORT =\u003e [ \"5432\", Config::T_STRING ], Config::MYSQL_CHARSET =\u003e [ \"UTF8\", Config::T_STRING ], Config::SELF_URL_PATH =\u003e [ \"https://example.com/tt-rss\", Config::T_STRING ], Config::SINGLE_USER_MODE =\u003e [ \"\", Config::T_BOOL ], Config::SIMPLE_UPDATE_MODE =\u003e [ \"\", Config::T_BOOL ], Config::PHP_EXECUTABLE =\u003e [ \"/usr/bin/php\", Config::T_STRING ], Config::LOCK_DIRECTORY =\u003e [ \"lock\", Config::T_STRING ], 去掉禁用函数putenv() ,改用define()定义,详见Error: PDO object:SQLSTATE[08006] [7] could not connect to server \u003c?php // ******************************************* // *** Database configuration (important!) *** // ******************************************* define('DB_TYPE', \"pgsql\"); // or mysql define('DB_HOST', \"localhost\"); define('DB_USER', \"fox\"); define('DB_NAME', \"fox\"); define('DB_PASS', \"XXXXXX\"); define('DB_PORT', ''); // usually 5432 for PostgreSQL, 3306 for MySQL define('MYSQL_CHARSET', 'UTF8'); // Connection charset for MySQL. If you have a legacy database and/or experience // garbage unicode characters with this option, try setting it to a blank string. // *********************************** // *** Basic settings (important!) *** // *********************************** define('SELF_URL_PATH', 'https://example.org/tt-rss/'); // This should be set to a fully qualified URL used to access // your tt-rss instance over the net. // The value should be a constant string literal. Please don't use // PHP server variables here - you might introduce security // issues on your install and cause hard to debug problems. // If your tt-rss instance is behind a reverse proxy, use the external URL. define('SINGLE_USER_MODE', false); // Operate in single user mode, disables all functionality related to // multiple users and authentication. Enabling this assumes you have // your tt-rss directory protected by other means (e.g. http auth). define('SIMPLE_UPDATE_MODE', false); // Enables fallback update mode where tt-rss tries to update feeds in // background while tt-rss is open in your browser. // If you don't have a lot of feeds and don't want to or can't run // background processes while not running tt-rss, this method is generally // viable to keep your feeds up to date. // Still, there are more robust (and recommended) updating methods // available, you can read about them here: http://tt-rss.org/wiki/UpdatingFeeds \u003cblah, etc, blah\u003e ","date":"2023-10-27","objectID":"/posts/bt-install-tt-rss/:3:2","tags":["宝塔面板","tt-rss"],"title":"宝塔面板安装Tiny Tiny RSS","uri":"/posts/bt-install-tt-rss/"},{"categories":["玩乐随心"],"content":"坑三：非root用户运行 Please don’t run this script as root. 不能使用root运行，通过su切换指定www用户运行。 sudo -u www /www/server/php/74/bin/php ./update.php --update-schema 以下备用 sudo -u www-data php ./update.php --daemon ","date":"2023-10-27","objectID":"/posts/bt-install-tt-rss/:3:3","tags":["宝塔面板","tt-rss"],"title":"宝塔面板安装Tiny Tiny RSS","uri":"/posts/bt-install-tt-rss/"},{"categories":["玩乐随心"],"content":"博客部署到vercel上，有时终究是会遇到网络抽风，听说雨云线路还不错，也有免费用度，于是搞了台雨云的香港宝塔面板，研究如何可以达到像vercel上的自动部署效果。 ","date":"2023-10-24","objectID":"/posts/github-webhook-bt-hugo/:0:0","tags":["github","webhook","bt","hugo"],"title":"使用github的webhook自动触发宝塔部署的hugo博客更新","uri":"/posts/github-webhook-bt-hugo/"},{"categories":["玩乐随心"],"content":"解决方案 本地提交 hugo 源码到 Github，自动触发构建并同步到宝塔指定的网站目录。 ","date":"2023-10-24","objectID":"/posts/github-webhook-bt-hugo/:1:0","tags":["github","webhook","bt","hugo"],"title":"使用github的webhook自动触发宝塔部署的hugo博客更新","uri":"/posts/github-webhook-bt-hugo/"},{"categories":["玩乐随心"],"content":"Github自动构建 在 Github 的 Hugo 源码仓库根目录，新建\".github/workflows/xxx.yml 文件，复制以下代码。作用：借助 Github Action 实现自动构建，并同步到另外一个仓库。其中 PERSONAL_TOKEN 为另外仓库的访问密钥；external_repository 为另外仓库地址。 name: Githubblog on: workflow_dispatch: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: 'latest' extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.PERSONAL_TOKEN }} external_repository: koobai/koobai.github.io publish_dir: ./public ","date":"2023-10-24","objectID":"/posts/github-webhook-bt-hugo/:1:1","tags":["github","webhook","bt","hugo"],"title":"使用github的webhook自动触发宝塔部署的hugo博客更新","uri":"/posts/github-webhook-bt-hugo/"},{"categories":["玩乐随心"],"content":"宝塔面板终端生成 git 公钥 # Git全局配置和单个仓库的用户名邮箱配置 git config --global user.name \"username\" git config --global user.email \"your@email.com\" # 生成git公钥用于自动拉取 ssh-keygen -t rsa -C \"你的@email.com\" # 查看git公钥 cat ~/.ssh/id_rsa.pub ","date":"2023-10-24","objectID":"/posts/github-webhook-bt-hugo/:1:2","tags":["github","webhook","bt","hugo"],"title":"使用github的webhook自动触发宝塔部署的hugo博客更新","uri":"/posts/github-webhook-bt-hugo/"},{"categories":["玩乐随心"],"content":"添加公钥到到 Github 头像–Settings–SSH and GPG keys–New SSH key ","date":"2023-10-24","objectID":"/posts/github-webhook-bt-hugo/:1:3","tags":["github","webhook","bt","hugo"],"title":"使用github的webhook自动触发宝塔部署的hugo博客更新","uri":"/posts/github-webhook-bt-hugo/"},{"categories":["玩乐随心"],"content":"宝塔面板安装 WebHook 触发同步 打开宝塔面板商店，安装 WebHook 插件–添加执行脚本 (复制以下代码)。其中\"gitHttp 为需同步的 github 仓库地址\"，“gh-pages\"为仓库分支名称。 #!/bin/bash echo \"\" #输出当前时间 date --date='0 days ago' \"+%Y-%m-%d %H:%M:%S\" echo \"Start\" #git分支名称 branch=\"gh-pages\" #git项目路径 gitPath=\"/www/wwwroot/$1\" #git 仓库地址 gitHttp=\"git@github.com:yourname/yourname.github.io.git\" echo \"Web站点路径：$gitPath\" #判断项目路径是否存在 if [ -d \"$gitPath\" ]; then cd $gitPath #判断是否存在git目录 if [ ! -d \".git\" ]; then echo \"在该目录下克隆 git\" sudo git clone $gitHttp gittemp sudo mv gittemp/.git . sudo rm -rf gittemp fi echo \"拉取最新的项目文件\" #sudo git reset --hard origin/$branch git remote add origin $gitHttp git branch --set-upstream-to=origin/$branch $branch sudo git reset --hard origin/$branch sudo git pull $gitHttp 2\u003e\u00261 echo \"设置目录权限\" sudo chown -R www:www $gitPath echo \"End\" exit else echo \"该项目路径不存在\" echo \"新建项目目录\" mkdir $gitPath cd $gitPath #判断是否存在git目录 if [ ! -d \".git\" ]; then echo \"在该目录下克隆 git\" sudo git clone $gitHttp gittemp sudo mv gittemp/.git . sudo rm -rf gittemp fi echo \"拉取最新的项目文件\" #sudo git reset --hard origin/$branch sudo git pull gitHttp 2\u003e\u00261 echo \"设置目录权限\" sudo chown -R www:www $gitPath echo \"End\" exit fi ","date":"2023-10-24","objectID":"/posts/github-webhook-bt-hugo/:1:4","tags":["github","webhook","bt","hugo"],"title":"使用github的webhook自动触发宝塔部署的hugo博客更新","uri":"/posts/github-webhook-bt-hugo/"},{"categories":["玩乐随心"],"content":"Github 网页仓库配置 WebHook 查看 WebHook 插件密钥，复制密钥地址。添加到 Github 需同步的仓库–Settings–Webhooks–Add webhook。其中 Content type 选择 application/json。 格式如：https://面板地址:面板端口/hook?access_key=密钥\u0026param=需同步到的目录名称 至此，步骤全部完成。当本地提交新文件到 Github hugo 源码 main 分支，就会自动触发（hugo 生成静态文件——同步到另一个仓库——同步到宝塔网站指定目录）。如果域名指定境外访问路径是 vercel 或 cloudflare 服务，当 hugo 源码更新的时候也会自动触发构建更新。 ","date":"2023-10-24","objectID":"/posts/github-webhook-bt-hugo/:1:5","tags":["github","webhook","bt","hugo"],"title":"使用github的webhook自动触发宝塔部署的hugo博客更新","uri":"/posts/github-webhook-bt-hugo/"},{"categories":["玩乐随心"],"content":"参考 Github 自动构建 Hugo, 并通过 Webhook 同步到宝塔指定目录 GitHub Pages Action ","date":"2023-10-24","objectID":"/posts/github-webhook-bt-hugo/:2:0","tags":["github","webhook","bt","hugo"],"title":"使用github的webhook自动触发宝塔部署的hugo博客更新","uri":"/posts/github-webhook-bt-hugo/"},{"categories":["玩乐随心"],"content":"防火墙用于监控过滤传入和传出网络流量，可以定义一组规则用来放行或者组织特定流量。 很多大厂自带防火墙相当强力，但是对于大部分IDC商而言，并没有提供相应的面板，如果想要达到阻断某些流量的效果就需要自行安装并配置。比如22(ssh) 端口只允许特定IP登录。 Debian10 附赠UFW防火墙配置工具，用于管理iptables，不过更加友好，简单，易使用。 本文介绍如何使用UFW在Debian 系统中配置和管理防火墙。文章只包含基础用法。 本文环境：Debian11 默认root 权限 ","date":"2023-10-18","objectID":"/posts/use-ufw/:0:0","tags":["UFW","dibian"],"title":"UFW 防火墙使用备忘","uri":"/posts/use-ufw/"},{"categories":["玩乐随心"],"content":"使用UFW ","date":"2023-10-18","objectID":"/posts/use-ufw/:1:0","tags":["UFW","dibian"],"title":"UFW 防火墙使用备忘","uri":"/posts/use-ufw/"},{"categories":["玩乐随心"],"content":"安装UFW apt update apt install ufw 安装完成后可以使用 ufw status verbose 查看当前状态 ","date":"2023-10-18","objectID":"/posts/use-ufw/:1:1","tags":["UFW","dibian"],"title":"UFW 防火墙使用备忘","uri":"/posts/use-ufw/"},{"categories":["玩乐随心"],"content":"UFW默认策略 ufw防火墙默认阻止所有传入和转发流量，允许所有出站流量。这就意味着除非打开专门的ssh端口，否则所有访问服务器的流量，包括你自己都无法连接。 ","date":"2023-10-18","objectID":"/posts/use-ufw/:1:2","tags":["UFW","dibian"],"title":"UFW 防火墙使用备忘","uri":"/posts/use-ufw/"},{"categories":["玩乐随心"],"content":"应用配置文件 # 查看软件安装包 ufw app list # 查看相应配置文件 ufw app info 'SSH' ","date":"2023-10-18","objectID":"/posts/use-ufw/:1:3","tags":["UFW","dibian"],"title":"UFW 防火墙使用备忘","uri":"/posts/use-ufw/"},{"categories":["玩乐随心"],"content":"开启UFW 一定注意，使用UFW第一项就要开启你相应的ssh 端口，否则下次将无法登录！ # 按照默认配置开启tcp 22端口 ufw allow ssh # 如果改变了ssh 端口，如33 ufw allow 33/tcp # 开启ufw ufw enable ","date":"2023-10-18","objectID":"/posts/use-ufw/:1:4","tags":["UFW","dibian"],"title":"UFW 防火墙使用备忘","uri":"/posts/use-ufw/"},{"categories":["玩乐随心"],"content":"通用规则 通过上文的开启ssh 端口并启用UFW，其实已经可以看出一般规则 ","date":"2023-10-18","objectID":"/posts/use-ufw/:2:0","tags":["UFW","dibian"],"title":"UFW 防火墙使用备忘","uri":"/posts/use-ufw/"},{"categories":["玩乐随心"],"content":"增加规则 开启指定端口 # 端口以999为例 # 指定端口协议 ufw allow port/protoc # 指定端口，不指定协议，将同时允许tcp，udp ufw allow port # 如开启999端口的udp 协议 ufw allow 999/udp 开启指定范围端口 # 开启80，440端口 ufw allow 80,443/tcp # 开启888-999的tcp 协议端口 ufw allow 888:999/tcp 指定IP访问端口 # IP 66.66.66.66 可以访问连接所有服务器端口 ufw allow from 66.66.66.66 # 只有IP 66.66.66.66 可以访问22端口进行ssh连接 ufw allow from 66.66.66.66 to any port 22 子网/ip段 访问端口 # 192.168.1.1 - 192.168.1.254 可以访问3306 端口 ufw allow from 192.168.1.0/24 to any port 3306 拒绝访问 # 只需将allow 改为deny 即可 # 如拒绝1.2.3.4 访问网页 ufw deny from 1.2.3.4 to any port 80,443 通过服务开启端口 # 使用服务名称，如http ufw allow http # 指定协议端口 ufw allow 80/tcp # 如安装了Nginx可使用 ufw allow 'Nginx HTTP' ","date":"2023-10-18","objectID":"/posts/use-ufw/:2:1","tags":["UFW","dibian"],"title":"UFW 防火墙使用备忘","uri":"/posts/use-ufw/"},{"categories":["玩乐随心"],"content":"查看当前已添加规则 使用 ufw status numbered root@gogo:~# ufw status numbered Status: active To Action From -- ------ ---- [ 1] 668/tcp ALLOW IN Anywhere [ 2] 80/tcp ALLOW IN Anywhere [ 3] 668/tcp (v6) ALLOW IN Anywhere (v6) [ 4] 80/tcp (v6) ALLOW IN Anywhere (v6) ","date":"2023-10-18","objectID":"/posts/use-ufw/:2:2","tags":["UFW","dibian"],"title":"UFW 防火墙使用备忘","uri":"/posts/use-ufw/"},{"categories":["玩乐随心"],"content":"删除规则 使用编号删除 ufw delete id root@gogo:~# ufw delete 2 Deleting: allow 80/tcp Proceed with operation (y|n)? y Rule deleted 使用端口删除 # 删除端口访问 ufw delete allow 80/tcp ","date":"2023-10-18","objectID":"/posts/use-ufw/:2:3","tags":["UFW","dibian"],"title":"UFW 防火墙使用备忘","uri":"/posts/use-ufw/"},{"categories":["玩乐随心"],"content":"设置 UFW 状态 # 禁用ufw ufw disable # 启用ufw ufw enable 下一条命令为危险命令，将会删除所有活动规则，谨慎使用 ufw reset root@gogo:~# ufw reset Resetting all rules to installed defaults. This may disrupt existing ssh connections. Proceed with operation (y|n)? ","date":"2023-10-18","objectID":"/posts/use-ufw/:2:4","tags":["UFW","dibian"],"title":"UFW 防火墙使用备忘","uri":"/posts/use-ufw/"},{"categories":["玩乐随心"],"content":"问题解决 Docker 在UFW中的网络处理 安装了Docker后，涉及Docker网络放通存在变化，可以查以下资料适配。 解决-ufw-和-docker-的问题 #命令备忘 #按container_name管理 ufw-docker allow nginx-proxy-manager ufw-docker allow nginx-proxy-manager 443/tcp ufw-docker delete allow nginx-proxy-manager #放通docker容器内部 ufw allow from 172.16.0.0/12 to any #放通zerotier ufw allow from 10.147.x.0/24 to any #放通本地 ufw allow from 192.168.x.0/24 to any ","date":"2023-10-18","objectID":"/posts/use-ufw/:3:0","tags":["UFW","dibian"],"title":"UFW 防火墙使用备忘","uri":"/posts/use-ufw/"},{"categories":["玩乐随心"],"content":"Nginx的用法、配置及问题解决。 ","date":"2023-10-07","objectID":"/posts/nginx-study/:0:0","tags":["nginx"],"title":"Nginx学习笔记","uri":"/posts/nginx-study/"},{"categories":["玩乐随心"],"content":"nginx 配置 http 请求重定向到 https server { listen 80; server_name aaa.abc.dd; rewrite ^(.*)$ https://${server_name}$1 permanent; } 这样就可以 http://aaa.abc.dd 转到 https://aaa.abc.dd 了。 ","date":"2023-10-07","objectID":"/posts/nginx-study/:1:0","tags":["nginx"],"title":"Nginx学习笔记","uri":"/posts/nginx-study/"},{"categories":["玩乐随心"],"content":"Nginx防止被域名恶意解析的配置 nginx在决定请求由哪个server块执行时，主要关注的是server块中的listen和server_name两个字段，如果根据listen指令无法得到最佳匹配，将会开始解析server_name指令。nginx会检查请求中的\"Host\"头，这个值包含了客户端实际试图请求的域名或者ip地址。nginx会根据这个值去匹配server_name指令，匹配规则会在文章中详细描述。其中有一个需要大家注意的地方是如果没有匹配到任何规则的话，则会选择可用列表中的第一个server，带来的问题就是未绑定域名或IP直接访问80和443端口会给后端逻辑服务增加压力并产生不合理的错误日志，合适的解决办法是通过在nginx的server块中添加default_server禁止未绑定域名或IP访问80和443端口过滤不合理的流量。 server { server_name _; listen 80 default_server; listen 443 ssl default_server; ## To also support IPv6, uncomment this block # listen [::]:80 default_server; # listen [::]:443 ssl default_server; ssl_certificate \u003cpath to cert\u003e; ssl_certificate_key \u003cpath to key\u003e; return 444; access_log /var/log/nginx/000_default.access.log; error_log /var/log/nginx/000_default.error.log; } 这样在浏览器端访问的时候，浏览器会自动提示用户无法访问。 ","date":"2023-10-07","objectID":"/posts/nginx-study/:2:0","tags":["nginx"],"title":"Nginx学习笔记","uri":"/posts/nginx-study/"},{"categories":["玩乐随心"],"content":"Server_name指令 如果根据listen指令无法得到最佳匹配,将会开始解析server_name指令.nginx会检查请求中的\"Host\"头,这个值包含了客户端实际试图请求的域名或者ip地址.nginx会根据这个值去匹配server_name指令,匹配规则如下: nginx会尝试寻找一个和sever_name和Host值完全匹配的server块,如果找到多个精确匹配,则会使用第一个匹配的server块 如果没有找到精确匹配的server块,则nginx尝试找到server_name带有开头的server块,如果找到多个,则选择最长匹配的server块 如果没有找到使用开头的server块,则会寻找以结尾的server块,同样,如果有多个匹配, 选择最长匹配 如果没有找到使用匹配的server块,则会寻找使用正则表达式(以~开头)定义server_name的server块,如果找到多个匹配,会使用第一个匹配 如果没有找到正则表达式匹配的server块,则nginx将会选择一个匹配listen字段的default server块.每一个ip和端口组合都可以配置一个且只能配置一个默认的default_server块,如果没有的话,则会选择可用列表中的第一个server ","date":"2023-10-07","objectID":"/posts/nginx-study/:3:0","tags":["nginx"],"title":"Nginx学习笔记","uri":"/posts/nginx-study/"},{"categories":["玩乐随心"],"content":"常用命令 # reload nginx nginx -t nginx -s reload ","date":"2023-10-07","objectID":"/posts/nginx-study/:4:0","tags":["nginx"],"title":"Nginx学习笔记","uri":"/posts/nginx-study/"},{"categories":["玩乐随心"],"content":"搞了个低功耗小玩具N5105，做软路由刚刚好。 ","date":"2023-09-11","objectID":"/posts/openwrt-openclash-adguard-home/:0:0","tags":["OpenWrt","OpenClash","AdGuard Home"],"title":"OpenWrt + OpenClash + AdGuard Home 打造家庭专用网络","uri":"/posts/openwrt-openclash-adguard-home/"},{"categories":["玩乐随心"],"content":"总体方案 家庭网络，要使用顺手，我认为要符合以下几点： 光猫只桥接信号，主路由负责拨号，摆脱光猫弱鸡性能，保证并发量及持续稳定。 旁路由负责科学上网、VPN、DNS防污染、广告过滤等，功能只覆盖专用网络内部使用，影响面可控，保障就算旁路由宕机，也不影响大众群体网络正常访问。 NAS可根据储存数据的重要性分情况考虑，更建议独立机器部署，以免磁盘共用使得物理读写频繁损耗加剧，从而影响导致整体性能。 ","date":"2023-09-11","objectID":"/posts/openwrt-openclash-adguard-home/:1:0","tags":["OpenWrt","OpenClash","AdGuard Home"],"title":"OpenWrt + OpenClash + AdGuard Home 打造家庭专用网络","uri":"/posts/openwrt-openclash-adguard-home/"},{"categories":["玩乐随心"],"content":"主路由规划 为达到以上要求，方案自然就出来了。 主路由通过 DHCP 规划网段，以一个C段（192.168.3.0/24）为例，可分网段管理： 主路由设置内网IP（192.168.3.1），DNS自动获取或手动设置均可； 旁路由设置静态IP（192.168.3.2），GW（192.168.3.1），DNS（223.5.5.5）； 正常接入网络自动获取，IP（192.168.3.101 - 192.168.3.200），GW（192.168.3.1），DNS（223.5.5.5、119.29.29.29）； 对家庭成员常用设备手工静态分配，IP（192.168.3.41 - 192.168.3.80），GW（192.168.3.1），DNS（223.5.5.5、119.29.29.29）； 个人专用网络静态分配，IP（192.168.3.91 - 192.168.3.100），GW（192.168.3.2），DNS（192.168.3.2、223.5.5.5）； 剩余地址按需分配使用。 ","date":"2023-09-11","objectID":"/posts/openwrt-openclash-adguard-home/:2:0","tags":["OpenWrt","OpenClash","AdGuard Home"],"title":"OpenWrt + OpenClash + AdGuard Home 打造家庭专用网络","uri":"/posts/openwrt-openclash-adguard-home/"},{"categories":["玩乐随心"],"content":"旁路由配置 最终方案：客户端→AdGuard Home(53)→OpenClash(7874) 配置思路 客户端→Dnsmasq(53)→Clash(7874)→AdGuard Home(5335) 客户端→Dnsmasq(53)→AdGuard Home(5335)→OpenClash(7874) 客户端→AdGuard Home(53)→OpenClash(7874) 按思路1，在OpenClash里开启DNS劫持，让Dnsmasq把请求转发到OpenClash，然后在OpenClash里设置自定义上游DNS，把底下所有的上游DNS勾选都去掉，新建一个FallBack从AdGuard Home里获取结果；配置虽然成功了，但广告去除效果不好，根因是要屏蔽广告的地址经过OpenClash时就被代理出去了，所以不会向上游AdGuard Home去请求解析，而且AdGuard Home里客户端只能看见127.0.0.1这一条，也不够完美，所以这方案放弃；随后尝试方案2，AdGuard Home里的客户端也都能正常显示了，发现前面多了Dnsmasq似乎多余了，因为它只负责转发，所以衍生出方案3，但有个缺点，因为Dnsmasq和DHCP功能是在一起的，跳过了Dnsmasq则DHCP也不能用了，解决方案就是禁用旁路由DHCP功能，去lan接口里设置忽略此接口(不在此接口提供DHCP服务)，完美。 ","date":"2023-09-11","objectID":"/posts/openwrt-openclash-adguard-home/:3:0","tags":["OpenWrt","OpenClash","AdGuard Home"],"title":"OpenWrt + OpenClash + AdGuard Home 打造家庭专用网络","uri":"/posts/openwrt-openclash-adguard-home/"},{"categories":["玩乐随心"],"content":"安装OpenWrt系统 网络-接口-Lan，底下基本设置勾选 「忽略此接口」 网络-DHCP/DNS-高级设置，把DNS服务器端口由53改为其他，比如5335，主要不要端口冲突，保存生效 ","date":"2023-09-11","objectID":"/posts/openwrt-openclash-adguard-home/:3:1","tags":["OpenWrt","OpenClash","AdGuard Home"],"title":"OpenWrt + OpenClash + AdGuard Home 打造家庭专用网络","uri":"/posts/openwrt-openclash-adguard-home/"},{"categories":["玩乐随心"],"content":"OpenClash科学上网 服务-OpenClash-全局设置-DNS设置，去掉本地DNS持，勾选自定义上游DNS服务器，然后在下面自定义DNS里看够不够，有更好的DNS也可以加上去，勾选远程域名解析，应用配置 ","date":"2023-09-11","objectID":"/posts/openwrt-openclash-adguard-home/:3:2","tags":["OpenWrt","OpenClash","AdGuard Home"],"title":"OpenWrt + OpenClash + AdGuard Home 打造家庭专用网络","uri":"/posts/openwrt-openclash-adguard-home/"},{"categories":["玩乐随心"],"content":"AdGuard Home广告过滤 服务-AdGuard Home，点更新核心，点启用，重定向选择「无」，点手动设置，按如下修改，改完保存\u0026应用 bind_host: 0.0.0.0 bind_port: 3003 ... dns: bind_hosts: - 0.0.0.0 port: 53 ... upstream_dns: - 127.0.0.1:7874 配置结束，点击AdGuard Home里AdGuardHome Web:3003，可以打开ADG的管理界面，点击「过滤器-\u003eDNS封锁清单」，去网上找一些大神维护的ADG的去广告规则，加进去。 ","date":"2023-09-11","objectID":"/posts/openwrt-openclash-adguard-home/:3:3","tags":["OpenWrt","OpenClash","AdGuard Home"],"title":"OpenWrt + OpenClash + AdGuard Home 打造家庭专用网络","uri":"/posts/openwrt-openclash-adguard-home/"},{"categories":["玩乐随心"],"content":"无意网上看到大神使用Hugo建立的Blog，升起了自建的念头。 ","date":"2023-09-10","objectID":"/posts/migrate-from-hexo-to-hugo/:0:0","tags":["hexo","hugo"],"title":"从Hexo迁移到Hugo","uri":"/posts/migrate-from-hexo-to-hugo/"},{"categories":["玩乐随心"],"content":"为什么要迁移 可能是一颗喜欢折腾的心。 评估原来Hexo博客的情况，迁移工作不难。 Hugo优势更吸引，独立二进制文件，简洁高效。 Blog原有的文章数不多，希望有个新的开始，是时候积累点，无论是否流水账。 ","date":"2023-09-10","objectID":"/posts/migrate-from-hexo-to-hugo/:1:0","tags":["hexo","hugo"],"title":"从Hexo迁移到Hugo","uri":"/posts/migrate-from-hexo-to-hugo/"},{"categories":["玩乐随心"],"content":"对博客发展的顾虑，或是考虑过多 还是不喜欢为博客配图，这个无法从根本上改善博客的观感。也可能是未找到靠谱的图库解决方案。 总想着以后可能又不会继续书写下去，插入太多的图片，使用框架程序内特定的语法会影响后续迁移可能，带来的不确定性。 所以有点感觉是放不开手脚去做，畏手畏尾，从而什么都没有做。 ","date":"2023-09-10","objectID":"/posts/migrate-from-hexo-to-hugo/:2:0","tags":["hexo","hugo"],"title":"从Hexo迁移到Hugo","uri":"/posts/migrate-from-hexo-to-hugo/"},{"categories":["玩乐随心"],"content":"迁移发现惊喜 原来的Hexo博客已经折腾出后台管理解决方案了，通过Qoex可解决，但因为部署在Vercel上，大陆访问有一定的卡顿。 由于Qoex也支持Hugo，本计划也使用其进行后台管理，但总有不得力的感觉，谈不上喜欢或讨厌，也没有书写的兴致。 最后我也找到了合适的解决方案，通过VS Code可以远程管理部署在Debian上的Hugo程序代码，也方便在工作环境中远程管理，完美。 ","date":"2023-09-10","objectID":"/posts/migrate-from-hexo-to-hugo/:3:0","tags":["hexo","hugo"],"title":"从Hexo迁移到Hugo","uri":"/posts/migrate-from-hexo-to-hugo/"},{"categories":["玩乐随心"],"content":"网站建设思路 通过ZeroTier建立虚拟局域网，把家庭环境、工作环境、外出场景打通。 Hugo程序部署在Debian服务器上，开放SSH访问远程管理，生成环境唯一部署，减少出错可能性。 利用VS Code插件Remote SSH连接Debian系统上的Hugo源码目录，撰写文章。 VS Code终端运行命令发布预览，自带端口转发部署，可实时调试页面展示。 VS Code直接源码提交Github管理，使用Vercel监控提交记录，实现实时生成部署。 ","date":"2023-09-10","objectID":"/posts/migrate-from-hexo-to-hugo/:4:0","tags":["hexo","hugo"],"title":"从Hexo迁移到Hugo","uri":"/posts/migrate-from-hexo-to-hugo/"},{"categories":["玩乐随心"],"content":"问题解决 Github：通过sshkey的方式拉取代码报错kex_exchange_identification: Connection closed by remote 近来家庭网络进行了调整，增加了科学上网，应该是网络引发问题产生；网上查资料，通过编辑 ~/.ssh/config 文件（没有就新增），在用户目录下的.ssh目录，添加如下内容解决： Host github.com HostName ssh.github.com User git Port 443 ","date":"2023-09-10","objectID":"/posts/migrate-from-hexo-to-hugo/:5:0","tags":["hexo","hugo"],"title":"从Hexo迁移到Hugo","uri":"/posts/migrate-from-hexo-to-hugo/"},{"categories":["hello"],"content":"Welcome to Hugo FixIt! This is your very first post. Head to the documentation page linked below for a complete guidence to get started with the FixIt theme. All Documentation - FixIt https://fixit.lruihao.cn/documentation/ ","date":"2023-09-09","objectID":"/posts/hugo-hello-world/:0:0","tags":["hello","FixIt"],"title":"Hugo Hello World","uri":"/posts/hugo-hello-world/"},{"categories":["hello"],"content":"Quick Start ","date":"2023-09-09","objectID":"/posts/hugo-hello-world/:1:0","tags":["hello","FixIt"],"title":"Hugo Hello World","uri":"/posts/hugo-hello-world/"},{"categories":["hello"],"content":"Prerequisites Just install latest version of Hugo(\u003e= 0.109.0) for your OS (Windows, Linux, macOS). ","date":"2023-09-09","objectID":"/posts/hugo-hello-world/:1:1","tags":["hello","FixIt"],"title":"Hugo Hello World","uri":"/posts/hugo-hello-world/"},{"categories":["hello"],"content":"Clone Template Clone with your own repository url git clone --recursive git@github.com:hugo-fixit/hugo-fixit-blog-git.git ","date":"2023-09-09","objectID":"/posts/hugo-hello-world/:1:2","tags":["hello","FixIt"],"title":"Hugo Hello World","uri":"/posts/hugo-hello-world/"},{"categories":["hello"],"content":"Launching the Site # Development environment hugo server --disableFastRender --navigateToChanged --bind 0.0.0.0 # Production environment hugo server --disableFastRender --navigateToChanged --environment production --bind 0.0.0.0 Start via NPM script npm install # build the blog npm run build # run a local debugging server with watch npm run server # run a local debugging server in production environment npm run server:production # update theme submodules npm run update:theme ","date":"2023-09-09","objectID":"/posts/hugo-hello-world/:1:3","tags":["hello","FixIt"],"title":"Hugo Hello World","uri":"/posts/hugo-hello-world/"},{"categories":["hello"],"content":"Build the Site When your site is ready to deploy, run the following command: hugo For a complete quick start, see this page. ","date":"2023-09-09","objectID":"/posts/hugo-hello-world/:1:4","tags":["hello","FixIt"],"title":"Hugo Hello World","uri":"/posts/hugo-hello-world/"},{"categories":["hello"],"content":"Questions, ideas, bugs, pull requests All feedback is welcome! Head over to the issues or discussions tracker. ","date":"2023-09-09","objectID":"/posts/hugo-hello-world/:2:0","tags":["hello","FixIt"],"title":"Hugo Hello World","uri":"/posts/hugo-hello-world/"},{"categories":["玩乐随心"],"content":"CentOS离场，把玩debian。 ","date":"2023-04-09","objectID":"/posts/study-apline/:0:0","tags":["apline"],"title":"Apline学习笔记","uri":"/posts/study-apline/"},{"categories":["玩乐随心"],"content":"Docker ","date":"2023-04-09","objectID":"/posts/study-apline/:1:0","tags":["apline"],"title":"Apline学习笔记","uri":"/posts/study-apline/"},{"categories":["玩乐随心"],"content":"开启远程管理 Alpine管理服务是用RC的组件，如果开启远程管理，需要修改 /etc/init.d/docker，在command_args参数后 增加：-H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock， 完整的文件如下： #!/sbin/openrc-run # Copyright 1999-2013 Gentoo Foundation # Distributed under the terms of the GNU General Public License v2 command=\"${DOCKERD_BINARY:-/usr/bin/dockerd}\" pidfile=\"${DOCKER_PIDFILE:-/run/${RC_SVCNAME}.pid}\" command_args=\"-p \\\"${pidfile}\\\" ${DOCKER_OPTS} -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock\" DOCKER_LOGFILE=\"${DOCKER_LOGFILE:-/var/log/${RC_SVCNAME}.log}\" DOCKER_ERRFILE=\"${DOCKER_ERRFILE:-${DOCKER_LOGFILE}}\" DOCKER_OUTFILE=\"${DOCKER_OUTFILE:-${DOCKER_LOGFILE}}\" start_stop_daemon_args=\"--background \\ --stderr \\\"${DOCKER_ERRFILE}\\\" --stdout \\\"${DOCKER_OUTFILE}\\\"\" extra_started_commands=\"reload\" rc_ulimit=\"${DOCKER_ULIMIT:--c unlimited -n 1048576 -u unlimited}\" retry=\"${DOCKER_RETRY:-TERM/60/KILL/10}\" depend() { need sysfs cgroups } start_pre() { checkpath -f -m 0644 -o root:docker \"$DOCKER_LOGFILE\" } reload() { ebegin \"Reloading ${RC_SVCNAME}\" start-stop-daemon --signal HUP --pidfile \"${pidfile}\" eend $? \"Failed to stop ${RC_SVCNAME}\" } 然后重启 Docker 服务： service docker restart ","date":"2023-04-09","objectID":"/posts/study-apline/:1:1","tags":["apline"],"title":"Apline学习笔记","uri":"/posts/study-apline/"},{"categories":["玩乐随心"],"content":"挂载 ","date":"2023-04-09","objectID":"/posts/study-apline/:2:0","tags":["apline"],"title":"Apline学习笔记","uri":"/posts/study-apline/"},{"categories":["玩乐随心"],"content":"cifs # 必要的依赖组件 apk add cifs-utils openrc sudo rc-update add netmount //192.168.9.23/Disk_sataa5 /mnt/zidoo cifs _netdev,gid=0,uid=0,username=guest,password=guest,dynperm,exec,noacl,nobrl,nofail,nounix,rw,serverino,setuids,sfu 0 0 # 在 /etc/fstab 文件末位增加一行，用于配置 SAMBA/SMB/CIFS 服务挂载项 //192.168.9.23/Disk_sataa5 /mnt/zidoo cifs _netdev,credentials=/root/.smb.auth,gid=1000,uid=1000,dynperm,exec,noacl,nobrl,nofail,nounix,rw,serverino,setuids,sfu 0 0 # credentials file content - 建议以下认证信息不要包含特殊符号，以免无法认证 # /root/.smb.auth cat \u003e /root/.smb.auth username=username password=password domain=doaminname chmod 600 /root/.smb.auth # 初次手动挂载(免重启) mount -a 参考 Alpine Linux 中 Docker 开启远程管理 SAMBA/SMB/CIFS 开机自动挂载 for Alpine Linux ","date":"2023-04-09","objectID":"/posts/study-apline/:2:1","tags":["apline"],"title":"Apline学习笔记","uri":"/posts/study-apline/"},{"categories":["玩乐随心"],"content":"配置Docker可视化管理工具。 ","date":"2023-03-07","objectID":"/posts/portainer/:0:0","tags":["portainer"],"title":"Portainer - Docker可视化管理工具","uri":"/posts/portainer/"},{"categories":["玩乐随心"],"content":"连接远程和管理docker 远程管理docke，端口默认是2375，是未加密的docker socket，远程root无密码访问主机 ","date":"2023-03-07","objectID":"/posts/portainer/:1:0","tags":["portainer"],"title":"Portainer - Docker可视化管理工具","uri":"/posts/portainer/"},{"categories":["玩乐随心"],"content":"开启配置 方法一 配置远程访问的API vim /etc/default/docker 增加一行： DOCKER_OPTS=\"-H tcp://0.0.0.0:2375\" PS：这是网上给的配置方法，也是这种简单配置让Docker Daemon把服务暴露在tcp的2375端口上，这样就可以在网络上操作Docker了。Docker本身没有身份认证的功能，只要网络上能访问到服务端口，就可以操作Docker。 方法二 在/usr/lib/systemd/system/docker.service，配置远程访问。 主要是在[Service]这个部分，找到 ExecStart字段修改如下 vim /usr/lib/systemd/system/docker.service #ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H fd:// --containerd=/run/containerd/containerd.sock 方法三 修改daemon.json的配置 vim /etc/docker/daemon.json { \"hosts\": [\"tcp://0.0.0.0:2375\", \"unix:///var/run/docker.sock\"] } ","date":"2023-03-07","objectID":"/posts/portainer/:1:1","tags":["portainer"],"title":"Portainer - Docker可视化管理工具","uri":"/posts/portainer/"},{"categories":["玩乐随心"],"content":"重启docker，配置防火墙 重启docker重新读取配置文件，重新启动docker服务 systemctl daemon-reload systemctl restart docker 开放防火墙端口 firewall-cmd --zone=public --add-port=2375/tcp --permanent #或 ufw allow from 192.168.9.0/24 to any 刷新防火墙 firewall-cmd --reload #或 systemctl restart ufw 如果重启起不来 估计是这个 unix://var/run/docker.sock 文件位置不对，查找一下正确位置就好了。 find / -name docker.sock ","date":"2023-03-07","objectID":"/posts/portainer/:1:2","tags":["portainer"],"title":"Portainer - Docker可视化管理工具","uri":"/posts/portainer/"},{"categories":["玩乐随心"],"content":"CentOS离场，把玩debian。 适用版本：11（Bullseye） root@debian:~## uname -a Linux debian 5.10.0-21-amd64 #1 SMP Debian 5.10.162-1 (2023-01-21) x86_64 GNU/Linux ","date":"2023-03-06","objectID":"/posts/debian-installation/:0:0","tags":["debian"],"title":"自装Debian系统折腾手记","uri":"/posts/debian-installation/"},{"categories":["玩乐随心"],"content":"简言 说起为什么我要折腾Debian，还是因为CentOS不再更新了，在外新买的VPS也都使用了Debian系统，所以也想将目前的服务往Debian转移。 ","date":"2023-03-06","objectID":"/posts/debian-installation/:1:0","tags":["debian"],"title":"自装Debian系统折腾手记","uri":"/posts/debian-installation/"},{"categories":["玩乐随心"],"content":"安装 从官网下载ISO，加载启动即可。 Ps. 安装时root账号可设置空密码，这样就不能通过SSH登录了，必须另行设置新账号强密码即可。 可选清华的源，在安装过程中会将软件更至最新。 ","date":"2023-03-06","objectID":"/posts/debian-installation/:2:0","tags":["debian"],"title":"自装Debian系统折腾手记","uri":"/posts/debian-installation/"},{"categories":["玩乐随心"],"content":"时区 我们默认安装是已经正确设置时区，但是如果是第三方云主机时区就未必符合本地要求。 ## 查看时区，有 CST 正确 date ## 设置 sudo timedatectl set-timezone Asia/Shanghai ## 或者使用向导选择 tzselect ","date":"2023-03-06","objectID":"/posts/debian-installation/:2:1","tags":["debian"],"title":"自装Debian系统折腾手记","uri":"/posts/debian-installation/"},{"categories":["玩乐随心"],"content":"IPv6 编辑interfaces文件/etc/network/interfaces，在文本最后面添加： iface xxx inet6 dhcp 上面的xxx更换成接口名。 查看ipv6的网关： ip -6 route show 如果有：default via fe80::2e2:69ff:fe55:83a4 dev ens192 metric 1 pref medium，类似这样的出现，说明ipv6一切正常。否则需要手动编辑interfaces文件/etc/network/interfaces，在文本最后面添加： up route -A inet6 add default gw fe80::2e2:69ff:fe55:83a4 dev ens192 ","date":"2023-03-06","objectID":"/posts/debian-installation/:2:2","tags":["debian"],"title":"自装Debian系统折腾手记","uri":"/posts/debian-installation/"},{"categories":["玩乐随心"],"content":"zsh 好用的zsh怎么少得了。 # 查看当前shell echo $SHELL # 安装 apt install zsh # 为 root 设置默认 shell chsh -s /bin/zsh 全局配置 zsh 注意：以下全局配置相关命令需要 root 权限，请切换到 root 账号，或者使用 sudo。 全局安装 zsh 到 /etc 目录 git clone --depth=1 https://github.com/ohmyzsh/ohmyzsh.git /etc/oh-my-zsh 从模板文件复制 .zshrc 创建默认配置文件（新用户将使用该配置文件） cp /etc/oh-my-zsh/templates/zshrc.zsh-template /etc/skel/.zshrc 修改 on-my-zsh 的安装目录 export ZSH=$HOME/.oh-my-zsh 为 export ZSH=/etc/oh-my-zsh sed -i 's|$HOME/.oh-my-zsh|/etc/oh-my-zsh|g' /etc/skel/.zshrc 为每个用户配置独立的 cache 目录 编辑 /etc/skel/.zshrc 在 export ZSH=/etc/oh-my-zsh 下添加一句： export ZSH_CACHE_DIR=\"${XDG_CACHE_HOME:-$HOME/.cache}/oh-my-zsh\" 更改默认主题（推荐 ys） 编辑 /etc/skel/.zshrc 文件修改： sed -i '/^ZSH_THEME=.*/c ZSH_THEME=\"ys\"' /etc/skel/.zshrc 取消每周自动检查更新（新版不用管） 配置 ll 别名（可选） echo 'alias ll=\"ls -lahF --color --time-style=long-iso\"' \u003e\u003e /etc/skel/.zshrc 全局配置插件 全局安装插件（安装到 /etc/oh-my-zsh/custom/plugins/） zsh-syntax-highlighting：语法高亮插件 作用：命令错误会显示红色，直到你输入正确才会变绿色，另外路径正确会显示下划线。 git clone --depth=1 https://github.com/zsh-users/zsh-syntax-highlighting.git /etc/oh-my-zsh/custom/plugins/zsh-syntax-highlighting zsh-autosuggestions 作用：根据历史输入命令的记录即时的提示（建议补全），然后按 → 键即可补全。 git clone --depth=1 https://github.com/zsh-users/zsh-autosuggestions.git /etc/oh-my-zsh/custom/plugins/zsh-autosuggestions 启用插件 编辑 /etc/skel/.zshrc，找到 plugins=(git) 这一行，修改为： plugins=([plugins...]zsh-syntax-highlighting zsh-autosuggestions) 快速修改： sed -i '/^plugins=.*/c plugins=(git zsh-syntax-highlighting zsh-autosuggestions)' /etc/skel/.zshrc 使用用户配置文件 改变新用户的默认 shell vi /etc/default/useradd 将 SHELL= * (比如 SHELL=/bin/sh) 改成 SHELL=/bin/zsh sed -i '/^SHELL=.*/c SHELL=/bin/zsh' /etc/default/useradd 修改后，使用 useradd 命令无需 -s /bin/zsh，用户默认使用 zsh，当然也可以不修改此项，useradd 命令继续追加 -s /bin/zsh 参数。 新用户登录后，将自动复制 .zshrc 和上述 cache 目录到用户主目录下，并自动加载 zsh 配置。 针对现有用户 直接复制 /etc/skel/.zshrc 到 ~/ cp /etc/skel/.zshrc ~/.zshrc source ~/.zshrc ","date":"2023-03-06","objectID":"/posts/debian-installation/:2:3","tags":["debian"],"title":"自装Debian系统折腾手记","uri":"/posts/debian-installation/"},{"categories":["玩乐随心"],"content":"Git 解决中文乱码 git config --global core.quotepath false ","date":"2023-03-06","objectID":"/posts/debian-installation/:2:4","tags":["debian"],"title":"自装Debian系统折腾手记","uri":"/posts/debian-installation/"},{"categories":["玩乐随心"],"content":"Docker 以下操作需要在 root 用户下完成，请使用 sudo -i 或 su root 切换到 root 用户进行操作。 首先，安装一些必要的软件包： apt update apt upgrade -y apt install curl vim wget gnupg apt-transport-https lsb-release ca-certificate 然后加入 Docker 的 GPG 公钥和 apt 源： wget -O /usr/share/keyrings/docker.asc https://download.docker.com/linux/debian/gpg echo \"deb [signed-by=/usr/share/keyrings/docker.asc] https://download.docker.com/linux/debian $(lsb_release -sc) stable\" \u003e /etc/apt/sources.list.d/docker.list 国内机器可以用清华 TUNA的国内源： wget -O /usr/share/keyrings/docker.asc https://download.docker.com/linux/debian/gpg echo \"deb [signed-by=/usr/share/keyrings/docker.asc] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian $(lsb_release -sc) stable\" \u003e /etc/apt/sources.list.d/docker.list 然后更新系统后即可安装 Docker CE： apt update apt-get install docker-ce docker-ce-cli containerd.io 此时可以使用 docker version 命令检查是否安装成功： root@debian:~## docker version Client: Docker Engine - Community Version: 23.0.1 API version: 1.42 Go version: go1.19.5 Git commit: a5ee5b1 Built: Thu Feb 9 19:46:54 2023 OS/Arch: linux/amd64 Context: default Server: Docker Engine - Community Engine: Version: 23.0.1 API version: 1.42 (minimum version 1.12) Go version: go1.19.5 Git commit: bc3805a Built: Thu Feb 9 19:46:54 2023 OS/Arch: linux/amd64 Experimental: false containerd: Version: 1.6.18 GitCommit: 2456e983eb9e37e47538f59ea18f2043c9a73640 runc: Version: 1.1.4 GitCommit: v1.1.4-0-g5fd4c4d docker-init: Version: 0.19.0 GitCommit: de40ad0 常用命令 # 跟踪日志 docker logs -f --tail=200 xxx # 删除未使用的镜像 docker image prune Docker Compose 我们可以使用 Docker 官方发布的 Github 直接安装最新版本： curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-Linux-x86_64 \u003e /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose 此时可以使用 docker-compose version 命令检查是否安装成功： root@debian ~ # docker-compose version Docker Compose version v2.16.0 修改 Docker 配置 以下配置会增加一段自定义内网 IPv6 地址，开启容器的 IPv6 功能，以及限制日志文件大小，防止 Docker 日志塞满硬盘（泪的教训）： cat \u003e /etc/docker/daemon.json { \"log-driver\": \"json-file\", \"log-opts\": { \"max-size\": \"20m\", \"max-file\": \"3\" }, \"ipv6\": true, \"fixed-cidr-v6\": \"fd00:dead:beef:c0::/80\", \"experimental\":true, \"ip6tables\":true } 然后重启 Docker 服务： systemctl restart docker 好了，我们已经安装好了 Docker 和 Docker Compose，然后就可以开始愉快的安装各种软件。 ","date":"2023-03-06","objectID":"/posts/debian-installation/:2:5","tags":["debian"],"title":"自装Debian系统折腾手记","uri":"/posts/debian-installation/"},{"categories":["玩乐随心"],"content":"scp 上传下载文件 1、上传本地文件到服务器 scp /path/filename username@servername:/path/ 2、从服务器上下载文件 scp username@servername:/path/filename /var/www/local\\_dir(本地目录) 3、从服务器下载整个目录 scp -r username@servername:/var/www/remote\\_dir/(远程目录) /var/www/local\\_dir(本地目录) 4、上传目录到服务器 scp -r local\\_dir username@servername:remote\\_dir ","date":"2023-03-06","objectID":"/posts/debian-installation/:2:6","tags":["debian"],"title":"自装Debian系统折腾手记","uri":"/posts/debian-installation/"},{"categories":["玩乐随心"],"content":"挂载 # 只可以查看已经挂载的分区和文件系统类型。 df -T # 可以显示出所有挂载和未挂载的分区，但不显示文件系统类型。 fdisk -l # 也可以查看未挂载的文件系统类型。 lsblk -f # 可以查看未挂载的文件系统类型，以及哪些分区尚未格式化。 parted -l # 开机自动挂载 vi /etc/fstab ","date":"2023-03-06","objectID":"/posts/debian-installation/:3:0","tags":["debian"],"title":"自装Debian系统折腾手记","uri":"/posts/debian-installation/"},{"categories":["玩乐随心"],"content":"硬盘 # 在 fstab 文件末位增加一行，用于设置开机自动挂载 硬盘 UUID=25b53c64-94ec-4bd6-a322-a1b776ad86c1 /mnt/hdd1 ext4 errors=remount-ro 0 2 ","date":"2023-03-06","objectID":"/posts/debian-installation/:3:1","tags":["debian"],"title":"自装Debian系统折腾手记","uri":"/posts/debian-installation/"},{"categories":["玩乐随心"],"content":"cifs # 单次挂载 mount -t cifs //192.168.9.23/Disk_sataa5 /mnt/zidoo -o username=xxx,password=xxx mount -t cifs //192.168.9.23/Disk_sataa5 /mnt/zidoo -o username=guest,password=guest # 在 fstab 文件末位增加一行，用于设置开机自动挂载 smb //192.168.9.23/Disk_sataa5 /mnt/zidoo cifs uid=0,gid=0,username=xxx,password=xxx,sec=ntlm 0 2 //192.168.9.23/Disk_sataa5 /mnt/zidoo cifs defaults 0 2 # 若报错可尝试先安装cifs工具包 apt install cifs-utils 参考 Debian 11 “bullseye” 安装笔记 Linux 全局安装配置 zsh + oh-my-zsh 非桌面版Debian 11自动配置获取ipv6地址教程 在git中出现中文乱码的解决方案 ","date":"2023-03-06","objectID":"/posts/debian-installation/:3:2","tags":["debian"],"title":"自装Debian系统折腾手记","uri":"/posts/debian-installation/"},{"categories":["玩乐随心"],"content":"记录玩VPS的点滴。 ","date":"2023-02-18","objectID":"/posts/vps-basic/:0:0","tags":["VPS"],"title":"VPS到手基本流程","uri":"/posts/vps-basic/"},{"categories":["玩乐随心"],"content":"一 简介 记录玩VPS的点滴。 ","date":"2023-02-18","objectID":"/posts/vps-basic/:1:0","tags":["VPS"],"title":"VPS到手基本流程","uri":"/posts/vps-basic/"},{"categories":["玩乐随心"],"content":"二 关键记录 ","date":"2023-02-18","objectID":"/posts/vps-basic/:2:0","tags":["VPS"],"title":"VPS到手基本流程","uri":"/posts/vps-basic/"},{"categories":["玩乐随心"],"content":"1 Debian 适用版本：11（Bullseye）、12 1.1 查看内核版本 uname -r 1.2 开启SSH登录 sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config systemctl restart ssh 1.3 更新系统包 apt update -y \u0026\u0026 apt upgrade -y apt-get update失败 Err:1 http://archive.ubuntu.com/ubuntu xenial InRelease 出现此问题，一般是因为DNS设置的问题，将DNS设置为 8.8.8.8 通过下面命令查看DNS cat /etc/resolv.conf 通过下面命令修改DNS echo \"nameserver 8.8.8.8\" | tee /etc/resolv.conf \u003e /dev/null 修改后再次查看 cat /etc/resolv.conf nameserver 8.8.8.8 说明设置成功。 1.4 安装常用软件 apt install -y sudo apt install -y curl apt install -y socat ","date":"2023-02-18","objectID":"/posts/vps-basic/:2:1","tags":["VPS"],"title":"VPS到手基本流程","uri":"/posts/vps-basic/"},{"categories":["玩乐随心"],"content":"4 系统通用 ","date":"2023-02-18","objectID":"/posts/vps-basic/:2:2","tags":["VPS"],"title":"VPS到手基本流程","uri":"/posts/vps-basic/"},{"categories":["玩乐随心"],"content":"4.1 IP curl -4 ip.sb curl -6 ip.sb ","date":"2023-02-18","objectID":"/posts/vps-basic/:2:3","tags":["VPS"],"title":"VPS到手基本流程","uri":"/posts/vps-basic/"},{"categories":["玩乐随心"],"content":"4.2 网络互联 ITDOG PING0 ping.pe ","date":"2023-02-18","objectID":"/posts/vps-basic/:2:4","tags":["VPS"],"title":"VPS到手基本流程","uri":"/posts/vps-basic/"},{"categories":["玩乐随心"],"content":"4.3 融合怪脚本 这个脚本非常不错，虽然是个融合脚本但是有很多别的脚本测不了的东西，有网络信息，IP信息，解锁信息，常用端口开放信息，硬件信息等。关于IP质量问题除了这个以外，IP信息还可以去这里查询，结果非常详细：https://ipinfo.io/ github项目地址：https://github.com/spiritLHLS/ecs bash \u003c(wget -qO- --no-check-certificate https://github.com/spiritLHLS/ecs/raw/main/ecs.sh) bash \u003c(wget -qO- --no-check-certificate https://gitlab.com/spiritysdx/za/-/raw/main/ecs.sh) ","date":"2023-02-18","objectID":"/posts/vps-basic/:2:5","tags":["VPS"],"title":"VPS到手基本流程","uri":"/posts/vps-basic/"},{"categories":["玩乐随心"],"content":"4.4 添加 SWAP swap 是 Linux 中的虚拟内存，用于扩充物理内存不足而用来存储临时数据存在的。它类似于 Windows 中的虚拟内存。在 Windows 中，只可以使用文件来当作虚拟内存。而 linux 可以文件或者分区来当作虚拟内存。 这个虚拟内存对于内存小的 VPS 非常有必要，可以提高我们的运行效率。建议设置为实际ram的 2 倍。 wget -O box.sh https://raw.githubusercontent.com/BlueSkyXN/SKY-BOX/main/box.sh \u0026\u0026 chmod +x box.sh \u0026\u0026 clear \u0026\u0026 ./box.sh ","date":"2023-02-18","objectID":"/posts/vps-basic/:2:6","tags":["VPS"],"title":"VPS到手基本流程","uri":"/posts/vps-basic/"},{"categories":["玩乐随心"],"content":"4.5 哪吒监控 从自建部署的监控管理后台直接拿命令。 ","date":"2023-02-18","objectID":"/posts/vps-basic/:2:7","tags":["VPS"],"title":"VPS到手基本流程","uri":"/posts/vps-basic/"},{"categories":["玩乐随心"],"content":"4.6 Docker 官方一键安装脚本 wget -qO- get.docker.com | bash #查看docker版本 docker -v Docker-compose 安装 curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-Linux-x86_64 \u003e /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose docker-compose --version 4.6.1 修改 Docker 配置 以下配置会增加一段自定义内网 IPv6 地址，开启容器的 IPv6 功能，以及限制日志文件大小，防止 Docker 日志塞满硬盘（泪的教训）： cat \u003e /etc/docker/daemon.json \u003c\u003cEOF { \"log-driver\": \"json-file\", \"log-opts\": { \"max-size\": \"20m\", \"max-file\": \"3\" }, \"ipv6\": true, \"fixed-cidr-v6\": \"fd00:dead:beef:c0::/80\", \"experimental\":true, \"ip6tables\":true } EOF 然后重启 Docker 服务： systemctl restart docker 好了，我们已经安装好了 Docker 和 Docker Compose，然后就可以开始愉快的安装各种软件。 ","date":"2023-02-18","objectID":"/posts/vps-basic/:2:8","tags":["VPS"],"title":"VPS到手基本流程","uri":"/posts/vps-basic/"},{"categories":["玩乐随心"],"content":"4.7 ZeroTier 安装 curl -s https://install.zerotier.com/ | bash 填写网络ID，加入异地虚拟网络 zerotier-cli join (网络ID) 如果看见200 join OK字样就说明成功加入异地虚拟局域网了。 ","date":"2023-02-18","objectID":"/posts/vps-basic/:2:9","tags":["VPS"],"title":"VPS到手基本流程","uri":"/posts/vps-basic/"},{"categories":["玩乐随心"],"content":"4.8 Warp 各大一键脚本，三选一即可。 FSCARMEN : 首次运行 wget -N https://raw.githubusercontent.com/fscarmen/warp/main/menu.sh \u0026\u0026 bash menu.sh 日常维护 warp P3TERX : 首次运行 bash \u003c(curl -fsSL git.io/warp.sh) menu 日常维护 bash warp.sh WARP-GO : 首次运行 wget -N https://raw.githubusercontent.com/fscarmen/warp/main/warp-go.sh \u0026\u0026 bash warp-go.sh 日常维护 warp-go ","date":"2023-02-18","objectID":"/posts/vps-basic/:2:10","tags":["VPS"],"title":"VPS到手基本流程","uri":"/posts/vps-basic/"},{"categories":["玩乐随心"],"content":"哪吒监控，可以说是拿到VPS，更新完系统后，几乎第一个就要装的监控程序。 几乎支持各种系统部署。 ","date":"2023-02-13","objectID":"/posts/nezha/:0:0","tags":["nezha"],"title":"哪吒监控 - 轻量服务器运维监控工具","uri":"/posts/nezha/"},{"categories":["玩乐随心"],"content":"透明主题 \u003cstyle\u003e /* 屏幕适配 */ @media only screen and (min-width: 1200px) { .ui.container { width: 80% !important; } } @media only screen and (max-width: 767px) { .ui.card\u003e.content\u003e.header:not(.ui), .ui.cards\u003e.card\u003e.content\u003e.header:not(.ui) { margin-top: 0.4em !important; } } /* 整体图标 */ i.icon { color: #000; width: 1.2em !important; } /* 背景图片 */ body { content: \" \" !important; background: fixed !important; z-index: -1 !important; top: 0 !important; right: 0 !important; bottom: 0 !important; left: 0 !important; background-position: top !important; background-repeat: no-repeat !important; background-size: cover !important; background-image: url(https://gitee.com/darki/img/raw/master/1631081013043.webp) !important; font-family: Arial,Helvetica,sans-serif !important; } /* 导航栏 */ .ui.large.menu { border: 0 !important; border-radius: 0px !important; background-color: rgba(255, 255, 255, 55%) !important; } /* 首页按钮 */ .ui.menu .active.item { background-color: transparent !important; } /* 导航栏下拉框 */ .ui.dropdown .menu { border: 0 !important; border-radius: 0 !important; background-color: rgba(255, 255, 255, 80%) !important; } /* 登陆按钮 */ .nezha-primary-btn { background-color: transparent !important; color: #000 !important; } /* 大卡片 */ #app .ui.fluid.accordion { background-color: #fbfbfb26 !important; border-radius: 0.4rem !important; } /* 小卡片 */ .ui.four.cards\u003e.card { border-radius: 0.6rem !important; background-color: #fafafaa3 !important; } .status.cards .wide.column { padding-top: 0 !important; padding-bottom: 0 !important; height: 3.3rem !important; } .status.cards .three.wide.column { padding-right: 0rem !important; } .status.cards .wide.column:nth-child(1) { margin-top: 2rem !important; } .status.cards .wide.column:nth-child(2) { margin-top: 2rem !important; } .status.cards .description { padding-bottom: 0 !important; } /* 小鸡名 */ .status.cards .flag { margin-right: 0.5rem !important; } /* 弹出卡片图标 */ .status.cards .header \u003e .info.icon { margin-right: 0 !important; } .nezha-secondary-font { color: #21ba45 !important; } /* 进度条 */ .ui.progress { border-radius: 50rem !important; } .ui.progress .bar { min-width: 1.8em !important; border-radius: 15px !important; line-height: 1.65em !important; } .ui.fine.progress\u003e .bar { background-color: #21ba45 !important; } .ui.progress\u003e .bar { background-color: #000 !important; } .ui.progress.fine .bar { background-color: #21ba45 !important; } .ui.progress.warning .bar { background-color: #ff9800 !important; } .ui.progress.error .bar { background-color: #e41e10 !important; } .ui.progress.offline .bar { background-color: #000 !important; } /* 上传下载 */ .status.cards .outline.icon { margin-right: 1px !important; } i.arrow.alternate.circle.down.outline.icon { color: #21ba45 !important; } i.arrow.alternate.circle.up.outline.icon { color: red !important; } /* 弹出卡片小箭头 */ .ui.right.center.popup { margin: -3px 0 0 0.914286em !important; -webkit-transform-origin: left 50% !important; transform-origin: left 50% !important; } .ui.bottom.left.popup { margin-left: 1px !important; margin-top: 3px !important; } .ui.top.left.popup { margin-left: 0 !important; margin-bottom: 10px !important; } .ui.top.right.popup { margin-right: 0 !important; margin-bottom: 8px !important; } .ui.left.center.popup { margin: -3px .91428571em 0 0 !important; -webkit-transform-origin: right 50% !important; transform-origin: right 50% !important; } .ui.right.center.popup:before, .ui.left.center.popup:before { border: 0px solid #fafafaeb !important; background: #fafafaeb !important; } .ui.top.popup:before { border-color: #fafafaeb transparent transparent !important; } .ui.popup:before { border-color: #fafafaeb transparent transparent !important; } .ui.bottom.left.popup:before { border-radius: 0 !important; border: 1px solid transparent !important; border-color: #fafafaeb transparent transparent !important; background: #fafafaeb !important; -webkit-box-shadow: 0px 0px 0 0 #fafafaeb !important; box-shadow: 0px 0px 0 0 #fafafaeb !important; -webkit-tap-","date":"2023-02-13","objectID":"/posts/nezha/:1:0","tags":["nezha"],"title":"哪吒监控 - 轻量服务器运维监控工具","uri":"/posts/nezha/"},{"categories":["玩乐随心"],"content":"Custom主题 转载 下载地址 使用方法 1.template里面的文件解压出来放到服务端/opt/nezha/dashboard/theme-custom/template目录里面 2.重启哪吒面板服务 3.在哪吒面板后台主题选择Custom(local) 4.将css.txt里面的CSS样式代码复制到哪吒面板后台的“自定义代码”文本框里 ","date":"2023-02-13","objectID":"/posts/nezha/:2:0","tags":["nezha"],"title":"哪吒监控 - 轻量服务器运维监控工具","uri":"/posts/nezha/"},{"categories":["玩乐随心"],"content":"注意事项 将面板和数据域名换成https的过程中，如果套在CloudFlare上，建议使用完全或完全（严格）的方式，因为如果使用的是灵活，CloudFlare有可能回落使用80端口与服务器间的访问，导致连通性各种问题，时通时不通。 ","date":"2023-02-13","objectID":"/posts/nezha/:3:0","tags":["nezha"],"title":"哪吒监控 - 轻量服务器运维监控工具","uri":"/posts/nezha/"},{"categories":["玩乐随心"],"content":"记录升级Hexo的注意事项。 ","date":"2023-02-08","objectID":"/posts/hexo-upgrade/:0:0","tags":["hexo"],"title":"Hexo版本更新","uri":"/posts/hexo-upgrade/"},{"categories":["玩乐随心"],"content":"升级Hexo ","date":"2023-02-08","objectID":"/posts/hexo-upgrade/:1:0","tags":["hexo"],"title":"Hexo版本更新","uri":"/posts/hexo-upgrade/"},{"categories":["玩乐随心"],"content":"npm的全局软件更新 # 清理NPM缓存 $ npm cache clean -f # 全局安装版本检测、版本升级工具 $ npm install -g npm-check $ npm install -g npm-upgrade # 全局检测哪些模块可以升级，这里可以根据打印的提示信息，手动安装最新版本的模块 $ npm-check -g # 全局更新模块 $ npm update -g # 全局安装或更新Hexo的最新版本 $ npm install --global hexo ","date":"2023-02-08","objectID":"/posts/hexo-upgrade/:1:1","tags":["hexo"],"title":"Hexo版本更新","uri":"/posts/hexo-upgrade/"},{"categories":["玩乐随心"],"content":"hexo当前目录的软件更新 # 进入博客的根目录 $ cd /blog-root # 检测Hexo哪些模块可以升级 $ npm-check # 删除package-lock.json # rm -rf package-lock.json # 更新package.json，一直回车即可 $ npm-upgrade # 删除整个模块目录，这样可以避免很多坑 $ rm -rf node_modules # 更新Hexo的模块 $ npm update --save # 若出现依赖的问题，用以下命令检查一下，然后把报错的统一修复一下即可 $ npm audix # 或者强制更新 $ npm update --save --force ","date":"2023-02-08","objectID":"/posts/hexo-upgrade/:1:2","tags":["hexo"],"title":"Hexo版本更新","uri":"/posts/hexo-upgrade/"},{"categories":["玩乐随心"],"content":"检查 做完上述步骤完成后，可package.json检查文件中版本信息。 ","date":"2023-02-08","objectID":"/posts/hexo-upgrade/:1:3","tags":["hexo"],"title":"Hexo版本更新","uri":"/posts/hexo-upgrade/"},{"categories":["玩乐随心"],"content":"完成 至此Hexo的升级就结束了，但是不要着急将源文件上传到仓库，先在本地三连一下hexo clean \u0026\u0026 hexo g -d，如果在执行Hexo d的时候报错了，可以尝试删除.deploy_git文件夹里面的内容，这个是前面生成的网站项目内容，与当前的不兼容。 ","date":"2023-02-08","objectID":"/posts/hexo-upgrade/:1:4","tags":["hexo"],"title":"Hexo版本更新","uri":"/posts/hexo-upgrade/"},{"categories":["玩乐随心"],"content":"参考链接 Hexo版本更新 ","date":"2023-02-08","objectID":"/posts/hexo-upgrade/:1:5","tags":["hexo"],"title":"Hexo版本更新","uri":"/posts/hexo-upgrade/"},{"categories":["玩乐随心"],"content":"zsh固然是好工具，但配置使用也同样重要，一定要“就手”。 ","date":"2022-06-14","objectID":"/posts/zsh-the-best-in-shell/:0:0","tags":["zsh"],"title":"Zsh - Shell中极品","uri":"/posts/zsh-the-best-in-shell/"},{"categories":["玩乐随心"],"content":"前言 zsh是来自普林斯顿大学的学生Paul Falstad于1990年发布的，这名字来自于当时也是普林斯顿大学的一名助教Zhong Shao（后来成为耶鲁大学教授）的login-id。zsh一开始的设计初衷是为Commodore公司于1985年出的个人电脑Amiga设计一个开源的csh的子集，结果一不小心就暴走了；它在发布的时候，已经成为了ksh和tcsh的交集——既吸收了ksh在命令式可编程脚本语言上的良好逻辑设计，又吸收了tcsh丝滑般的交互体验，集众家之长，自然牛逼了。 2019年，Apple的macOS Catalina将zsh作为默认shell，取代了bash；2020年，Kali Linux（一个著名的安全领域的Linux操作系统）从2020.4版本后，也将zsh作为默认shell。 ","date":"2022-06-14","objectID":"/posts/zsh-the-best-in-shell/:1:0","tags":["zsh"],"title":"Zsh - Shell中极品","uri":"/posts/zsh-the-best-in-shell/"},{"categories":["玩乐随心"],"content":"简介 zsh 是一个 Linux 下强大的 shell, 由于大多数 Linux 产品安装，以及默认使用bash shell, 但是丝毫不影响极客们对 zsh 的热衷, 几乎每一款 Linux 产品都包含有 zsh，通常可以用 apt-get、urpmi 或 yum 等包管理器进行安装。 zsh 具有以下主要功能： 开箱即用、可编程的命令行补全功能可以帮助用户输入各种参数以及选项； 在用户启动的所有 shell 中共享命令历史； 通过扩展的文件通配符，可以不利用外部命令达到 find 命令一般展开文件名； 改进的变量与数组处理； 在缓冲区中编辑多行命令； 多种兼容模式，例如使用 / bin/sh 运行时可以伪装成 Bourne shell； 可以定制呈现形式的提示符；包括在屏幕右端显示信息，并在键入长命令时自动隐藏； 可加载的模块，提供其他各种支持：完整的 TCP 与 Unix 域套接字控制，FTP 客户端与扩充过的数学函数； 完全可定制化。 可见，zsh缺点就是配置太麻烦，好在有一个叫做oh-my-zsh的开源项目，很好的弥补了这一缺陷，只需要修修改改配置文件，就能很顺手。 ","date":"2022-06-14","objectID":"/posts/zsh-the-best-in-shell/:1:1","tags":["zsh"],"title":"Zsh - Shell中极品","uri":"/posts/zsh-the-best-in-shell/"},{"categories":["玩乐随心"],"content":"安装配置 ","date":"2022-06-14","objectID":"/posts/zsh-the-best-in-shell/:2:0","tags":["zsh"],"title":"Zsh - Shell中极品","uri":"/posts/zsh-the-best-in-shell/"},{"categories":["玩乐随心"],"content":"zsh 在 CentOS7 下，执行yum命令来安装需要的zsh原始程序与git程序来pull代码。 yum install -y zsh git # 查看系统shell cat /etc/shells # 或 chsh -l # 更换 chsh -s /bin/zsh # 或 chsh -s $(which zsh) ","date":"2022-06-14","objectID":"/posts/zsh-the-best-in-shell/:2:1","tags":["zsh"],"title":"Zsh - Shell中极品","uri":"/posts/zsh-the-best-in-shell/"},{"categories":["玩乐随心"],"content":"oh-my-zsh 安装oh-my-zsh脚本 (这一步需要先安装 git)。 sh -c \"$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" ","date":"2022-06-14","objectID":"/posts/zsh-the-best-in-shell/:2:2","tags":["zsh"],"title":"Zsh - Shell中极品","uri":"/posts/zsh-the-best-in-shell/"},{"categories":["玩乐随心"],"content":"Powerline字体 oh-my-zsh配置中采用的是Powerline字体，本地环境中若不包含该系列字体，则会出现乱码的问题。 # clone git clone https://github.com/powerline/fonts.git --depth=1 # install cd fonts ./install.sh # clean-up a bit cd .. rm -rf fonts # uninstall ./uninstall.sh ","date":"2022-06-14","objectID":"/posts/zsh-the-best-in-shell/:2:3","tags":["zsh"],"title":"Zsh - Shell中极品","uri":"/posts/zsh-the-best-in-shell/"},{"categories":["玩乐随心"],"content":"配置 ~/.zshrc # 配置主题 ZSH_THEME=\"agnoster\" ","date":"2022-06-14","objectID":"/posts/zsh-the-best-in-shell/:2:4","tags":["zsh"],"title":"Zsh - Shell中极品","uri":"/posts/zsh-the-best-in-shell/"},{"categories":["玩乐随心"],"content":"插件 使用 ZSH 替换原有的 SHELL 最主要的原因就是要使用其功能强大的插件，这里只推荐安装三个插件，它们分别是 wd、zsh-syntax-highlighting、zsh-autosuggestions 。 获取安装： cd ~/.oh-my-zsh/custom/plugins git clone https://github.com/zsh-users/zsh-syntax-highlighting.git git clone https://github.com/zsh-users/zsh-autosuggestions.git 编辑 ~/.zshrc 增加配置： plugins=(git wd zsh-syntax-highlighting zsh-autosuggestions) source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh source ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh ","date":"2022-06-14","objectID":"/posts/zsh-the-best-in-shell/:3:0","tags":["zsh"],"title":"Zsh - Shell中极品","uri":"/posts/zsh-the-best-in-shell/"},{"categories":["玩乐随心"],"content":"更多 ","date":"2022-06-14","objectID":"/posts/zsh-the-best-in-shell/:4:0","tags":["zsh"],"title":"Zsh - Shell中极品","uri":"/posts/zsh-the-best-in-shell/"},{"categories":["玩乐随心"],"content":"vscode中设置终端 在setting中搜索terminal选项，然后修改Integrated: Font Family的值为powerline字体即可。例如本人采用的是 Source Code Pro for Powerline 。 ","date":"2022-06-14","objectID":"/posts/zsh-the-best-in-shell/:4:1","tags":["zsh"],"title":"Zsh - Shell中极品","uri":"/posts/zsh-the-best-in-shell/"},{"categories":["玩乐随心"],"content":"Windows下终端工具。 ","date":"2017-10-04","objectID":"/posts/cmder/:0:0","tags":["cmder"],"title":"Cmder - 替代Cmd，打造Windows命令行军刀","uri":"/posts/cmder/"},{"categories":["玩乐随心"],"content":"简介 Cmder是一款Windows下终端工具，增强命令行的存在，把conemu，msysgit和clink打包在一起，让你无需配置就能使用一个真正干净的Linux终端！她甚至还附带了漂亮的monokai配色主题。官网下载的安装包其实是压缩档, 可即压即用。你甚至可以放到USB就可以虽时带着走，连调整过的设定都会放在这个目录下，不会用到系统机码(Registry)，所以也很适合放在Dropbox/Google Drive/OneDrive共享于多台电脑。 下载的时候，有两个版本，分别是mini与full版；唯一的差别在于有没有内建msysgit工具，这是Git for Windows的标准配备；全安装版cmder自带了msysgit, 压缩包23M, 除了git本身这个命令之外, 里面可以使用大量的linux命令；比如grep，curl(没有wget)；像vim，grep，tar，unzip，ssh，ls，bash，perl对于爱折腾的Coder更是痛点需求。 ","date":"2017-10-04","objectID":"/posts/cmder/:1:0","tags":["cmder"],"title":"Cmder - 替代Cmd，打造Windows命令行军刀","uri":"/posts/cmder/"},{"categories":["玩乐随心"],"content":"定制配置 为了军刀更锋利，更好用，少不了折腾一下配置，让它更适合个人的使用习惯。 打开管理员权限终端 输入Ctrl + t，或者点击下面控制条的绿色加号，勾选\"Run as administrator\" 添加 cmder 到右键菜单 打开管理员权限的终端，去到Cmder根目录，输入以下语句即可： Cmder.exe /REGISTER ALL 解决文字重叠问题 Win + ALT + P 唤出设置界面 \u003e mian \u003e font \u003e monospce,去掉那勾勾即可。 ","date":"2017-10-04","objectID":"/posts/cmder/:2:0","tags":["cmder"],"title":"Cmder - 替代Cmd，打造Windows命令行军刀","uri":"/posts/cmder/"},{"categories":["玩乐随心"],"content":"Cmder常用快捷键 跟一般浏览器页签操作习惯一致： 可以利用Tab，自动路径补全(爽,赞！)； 可以利用Ctrl+T建立新页签； 利用Ctrl+W关闭页签; 还可以透过Ctrl+Tab切换页签; Alt+F4：关闭所有页签 Alt+Shift+1：开启cmd.exe Alt+Shift+2：开启powershell.exe Alt+Shift+3：开启powershell.exe (系统管理员权限) Ctrl+1：快速切换到第1个页签 Ctrl+n：快速切换到第n个页签( n值无上限) Alt + enter：切换到全屏状态； Ctr+r：历史命令搜索; End, Home, Ctrl：Traversing text with as usual on Windows ","date":"2017-10-04","objectID":"/posts/cmder/:3:0","tags":["cmder"],"title":"Cmder - 替代Cmd，打造Windows命令行军刀","uri":"/posts/cmder/"},{"categories":["玩乐随心"],"content":"其他功能 Cmder还增加了alias功能；他让你用短短的指令执行一些常见但指令超长又难以记忆的语法；比如 ls cls等等；在其控制台输入alias可以查看（新版本已废除）。 主控台文字自动放大缩小功能，你只要按下Ctrl+滑鼠滚轮就可以办到；如果你用支援两点触控的笔电，也可以在触控板上用两指放大的手势调整文字大小。还有：up，向上翻历史命令; Cmder有极为简单的复制粘贴操作。Ctr+V直接粘贴；用鼠标选中你想拷贝的内容，自动就复制到剪切板； 自定义aliases：打开Cmder目录下的config文件夹，里面的user-aliases.cmd文件就是我们可以配置的别名文件。 l=ls --show-control-chars -alrtF --color $* ","date":"2017-10-04","objectID":"/posts/cmder/:4:0","tags":["cmder"],"title":"Cmder - 替代Cmd，打造Windows命令行军刀","uri":"/posts/cmder/"},{"categories":["玩乐随心"],"content":"问题及解决 ","date":"2017-10-04","objectID":"/posts/cmder/:5:0","tags":["cmder"],"title":"Cmder - 替代Cmd，打造Windows命令行军刀","uri":"/posts/cmder/"},{"categories":["玩乐随心"],"content":"问题一：中文乱码 一般的乱码在加了下边的软件环境变量后都可以解决，在Settings \u003e Startup \u003e Environment中添加： set LC_ALL=zh_CN.UTF8 ","date":"2017-10-04","objectID":"/posts/cmder/:5:1","tags":["cmder"],"title":"Cmder - 替代Cmd，打造Windows命令行军刀","uri":"/posts/cmder/"},{"categories":["玩乐随心"],"content":"问题二：git status 显示中文乱码 场景：在中文情况下Git status是这样的: Your branch is up-to-date with 'origin/master'. Changes not staged for commit: (use \"git add \u003cfile\u003e...\" to update what will be committed) (use \"git checkout -- \u003cfile\u003e...\" to discard changes in working directory) modified: \"\\345\\274\\200\\351\\242\\230\\346\\212\\245\\345\\221\\212/\\345\\267\\245\\347\\250\\213\\347\\241\\225\\345\\243\\253\\347\\240\\224\\347\\251\\266\\347\\224\\237\\345\\255\\246\\344\\275\\215\\350\\256\\272\\346\\226\\207\\345\\274\\200\\351\\242\\230\\346\\212\\245\\345\\221\\212\\342\\200\\224\\346\\235\\250\\345\\263\\273\\351\\271\\217.doc\" 解决方法： git config --global core.quotepath false ","date":"2017-10-04","objectID":"/posts/cmder/:5:2","tags":["cmder"],"title":"Cmder - 替代Cmd，打造Windows命令行军刀","uri":"/posts/cmder/"},{"categories":["玩乐随心"],"content":"参考资料 《Cmder–Windows下命令行利器》：http://www.cnblogs.com/zqzjs/p/6188605.html 《Win下必备神器之Cmder》：https://segmentfault.com/a/1190000004408436 《Windows 命令行增强 cmder chocolatey 配置指南》：http://www.jianshu.com/p/479d974078a7 ","date":"2017-10-04","objectID":"/posts/cmder/:6:0","tags":["cmder"],"title":"Cmder - 替代Cmd，打造Windows命令行军刀","uri":"/posts/cmder/"},{"categories":["玩乐随心"],"content":"跨平台的文本编辑器。 ","date":"2017-09-05","objectID":"/posts/sublime-text/:0:0","tags":["sublime text"],"title":"Sublime Text - 个人认为最好用的文本编辑器","uri":"/posts/sublime-text/"},{"categories":["玩乐随心"],"content":"简介 Sublime Text是付费软件，但非常之良心，只是偶尔弹出提示购买，并没有任何功能限制。作为一个跨平台的文本编辑器，支持基于Python的插件。可通过包（Package）扩充本身的功能。大多数的包使用自由软件授权发布，并由社区建置维护。 虽然Sublime Text 3一直在Beta，但很多插件已经开始放弃支持ST2了，所以推荐使用ST3。 下载地址戳这里：http://www.sublimetext.com/3 3143可用Sublime Text许可证一枚 ----- BEGIN LICENSE ----- TwitterInc 200 User License EA7E-890007 1D77F72E 390CDD93 4DCBA022 FAF60790 61AA12C0 A37081C5 D0316412 4584D136 94D7F7D4 95BC8C1C 527DA828 560BB037 D1EDDD8C AE7B379F 50C9D69D B35179EF 2FE898C4 8E4277A8 555CE714 E1FB0E43 D5D52613 C3D12E98 BC49967F 7652EED2 9D2D2E61 67610860 6D338B72 5CF95C69 E36B85CC 84991F19 7575D828 470A92AB ------ END LICENSE ------ 3126可用Sublime Text许可证一枚 —– BEGIN LICENSE —– Michael Barnes Single User License EA7E-821385 8A353C41 872A0D5C DF9B2950 AFF6F667 C458EA6D 8EA3C286 98D1D650 131A97AB AA919AEC EF20E143 B361B1E7 4C8B7F04 B085E65E 2F5F5360 8489D422 FB8FC1AA 93F6323C FD7F7544 3F39C318 D95E6480 FCCC7561 8A4A1741 68FA4223 ADCEDE07 200C25BE DBBC4855 C4CFB774 C5EC138C 0FEC1CEF D9DCECEC D3A5DAD1 01316C36 —— END LICENSE —— ","date":"2017-09-05","objectID":"/posts/sublime-text/:1:0","tags":["sublime text"],"title":"Sublime Text - 个人认为最好用的文本编辑器","uri":"/posts/sublime-text/"},{"categories":["玩乐随心"],"content":"定制配置 正所谓，没有插件的编辑器不是好的美工刀。 要有一把顺手的美工刀，总少不了定（调）制（教）。 安装插件管理器 ctrl+` 打开调试窗口，在输入框内粘贴如下代码，然后回车即可自动安装，安装完成可能需要重启ST。 import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http:// packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) 使用方法：工具栏 Preferences – Package Control，或者 ctrl+shift+P ，插件的安装卸载都可以在这里操作。 如何安装插件详见：https://packagecontrol.io/installation 推荐安装的插件列表 易用性： ChineseLocalization：完全汉化插件 HTML5：HTML5标签拓展 JsFormat：javascript格式化 CSS Format：CSS格式化 Tag：HTML格式化 Brackethighlighter：标签对标记，以高亮显示配对括号以及当前光标所在区域 SideBarEnhancements：增强型侧边栏 BufferScroll：代码折叠状态保留 StyleToken：标记颜色代码 AutoPEP8：格式化Python代码。 Alignment：进行智能对齐 功能： Markdown Editing：支持Markdown语法高亮；支持Github Favored Markdown语法；自带3个主题。本篇文章就是在此插件下完成 Emmet：前端神器 TortoiseSVN：SVN你懂的 QuoteHTML：把HTML拼接成js插入字符串，神器 Clipboard Manager：增强型剪贴板，可访问历史剪贴板记录 FileHeader：文件模板，可自动更新修改时间 AutoPrefixer：浏览器私有属性前缀补全 (Node.js依赖) ColorConvert：RGBA颜色转换，十六进制颜色转换为RGBA颜色 Better Completion：全能代码提示 LiveStyle：双向更改无刷新实时预览，包含chrome插件 Emmet LiveStyle SFTP：需要激活，看这里 http://mooring.iteye.com/blog/2067269 jQuery：jQuery 代码提示（Better Completion已可替代此插件） 其他： ConvertToUTF8：GBK编码兼容 IMESupport：输入法不跟随时安装 TrailingSpaces：多余空格标记，强迫症患者福音 Hasher：符号转义，ctrl+shift+p 选择 Entity Encode PackageResourceViewer：插件修改必备，ctrl+shift+p 调用 Open Resource 用户配置文件设置 工具栏 Preferences – Settings-User 加入下面的代码： // 使光标更柔和 \"caret_style\": \"phase\", // 自动移除行尾多余空格 \"trim_trailing_white_space_on_save\": true, // 文件末尾自动保留一个空行 \"ensure_newline_at_eof_on_save\": true, // 设置字体，推荐可以尝试 Yahei Consolas Hybrid \"font_face\": \"Microsoft Yahei UI\", // 设置字体大小 \"font_size\": 11, // 设置为 true ，禁用 Emmet 的 tab 键功能（请使用 ctrl+e），系统自带的`tab` 功能还是可圈可点的。当然也可以不设置它，以完全使用 Emmet 的 tab 补全功能 \"disable_tab_abbreviations\": true, // 把代码 tab 对齐转换为空格对齐 \"translate_tabs_to_spaces\": true, // 配合设置空格数 \"tab_size\": 2, // 用于右侧代码预览时给所在区域加上边框，方便识别 \"draw_minimap_border\": true, // 窗口失焦立即保存文件 \"save_on_focus_lost\": true, // 当前行高亮 \"highlight_line\": true, // 设置自动换行 \"word_wrap\": \"true\", // 默认显示行号右侧的代码段闭合展开三角号 \"fade_fold_buttons\": false, // 侧边栏文件夹显示加粗，区别于文件 \"bold_folder_labels\": true, // 高亮未保存文件 \"highlight_modified_tabs\": true, // 使用 unix 风格的换行符 \"default_line_ending\": \"unix\", // 开启选中范围内搜索，而不是整个文档 \"auto_find_in_selection\": true Windows系统将Sublime Text 添加到鼠标右键功能： 把以下内容复制并保存到文件，重命名为：sublime_addright.reg，然后双击就可以了。 Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\\*\\shell\\SublimeText3] @=\"Edit with Sublime Text3\" \"Icon\"=\"C:\\\\Program Files\\\\Sublime Text 3\\\\sublime_text.exe,0\" [HKEY_CLASSES_ROOT\\*\\shell\\SublimeText3\\command] @=\"C:\\\\Program Files\\\\Sublime Text 3\\\\sublime_text.exe %1\" [HKEY_CLASSES_ROOT\\Directory\\shell\\SublimeText3] @=\"Edit with Sublime Text3\" \"Icon\"=\"C:\\\\Program Files\\\\Sublime Text 3\\\\sublime_text.exe,0\" [HKEY_CLASSES_ROOT\\Directory\\shell\\SublimeText3\\command] @=\"C:\\\\Program Files\\\\Sublime Text 3\\\\sublime_text.exe %1\" 注意： 需要把代码中的Sublime的安装目录（C:\\Program Files\\Sublime Text 3\\sublime_text.exe），替换成自已实际的Sublime安装目录。 其中，@=“Edit with Sublime Text3” 引号中的内容为出现在鼠标右键菜单中的文字内容。 ","date":"2017-09-05","objectID":"/posts/sublime-text/:2:0","tags":["sublime text"],"title":"Sublime Text - 个人认为最好用的文本编辑器","uri":"/posts/sublime-text/"},{"categories":["玩乐随心"],"content":"使用技巧 ","date":"2017-09-05","objectID":"/posts/sublime-text/:3:0","tags":["sublime text"],"title":"Sublime Text - 个人认为最好用的文本编辑器","uri":"/posts/sublime-text/"},{"categories":["玩乐随心"],"content":"代码段（Code Snippets） Sublime Text 支持代码段（Code Snippet），输入代码段名称后 Tab 即可生成代码段。 可以通过Package Control安装第三方代码段，也可以自己创建代码段，参考这里 ","date":"2017-09-05","objectID":"/posts/sublime-text/:3:1","tags":["sublime text"],"title":"Sublime Text - 个人认为最好用的文本编辑器","uri":"/posts/sublime-text/"},{"categories":["玩乐随心"],"content":"全屏（Full Screen） Sublime Text 有两种全屏模式：普通全屏和无干扰全屏。 个人强烈建议在开启全屏前关闭菜单栏（Toggle Menu），否则全屏效果会大打折扣。 F11 切换普通全屏 Shift + F11 切换无干扰全屏 ","date":"2017-09-05","objectID":"/posts/sublime-text/:3:2","tags":["sublime text"],"title":"Sublime Text - 个人认为最好用的文本编辑器","uri":"/posts/sublime-text/"},{"categories":["玩乐随心"],"content":"格式化（Formatting） Sublime Text 基本的手动格式化操作包括： Ctrl + [ 向左缩进， Ctrl + ] 向右缩进，此外 Ctrl + Shift + V 可以以当前缩进粘贴代码（非常实用）。 ","date":"2017-09-05","objectID":"/posts/sublime-text/:3:3","tags":["sublime text"],"title":"Sublime Text - 个人认为最好用的文本编辑器","uri":"/posts/sublime-text/"},{"categories":["玩乐随心"],"content":"快捷键列表（Shortcuts Cheatsheet） 我把本文出现的Sublime Text按其类型整理在这里，以便查阅。 通用（General） ↑↓←→：上下左右移动光标，注意不是不是 KJHL ！ Alt：调出菜单 Ctrl + Shift + P：调出命令板（Command Palette） Ctrl + `：调出控制台 编辑（Editing） Ctrl + Enter：在当前行下面新增一行然后跳至该行 Ctrl + Shift + Enter：在当前行上面增加一行并跳至该行 Ctrl + ←/→：进行逐词移动 Ctrl + Shift + ←/→：进行逐词选择 Ctrl + ↑/↓：移动当前显示区域 Ctrl + Shift + ↑/↓：移动当前行 选择（Selecting） Ctrl + D：选择当前光标所在的词并高亮该词所有出现的位置，再次 Ctrl + D 选择该词出现的下一个位置，在多重选词的过程中，使用 Ctrl + K 进行跳过，使用 Ctrl + U 进行回退，使用 Esc 退出多重编辑 Ctrl + Shift + L：将当前选中区域打散 Ctrl + J：把当前选中区域合并为一行 Ctrl + M：在起始括号和结尾括号间切换 Ctrl + Shift + M：快速选择括号间的内容 Ctrl + Shift + J：快速选择同缩进的内容 Ctrl + Shift + Space：快速选择当前作用域（Scope）的内容 查找\u0026替换（Finding\u0026Replacing） F3：跳至当前关键字下一个位置 Shift + F3：跳到当前关键字上一个位置 Alt + F3：选中当前关键字出现的所有位置 Ctrl + F/H：进行标准查找/替换，之后： Alt + C：切换大小写敏感（Case-sensitive）模式 Alt + W：切换整字匹配（Whole matching）模式 Alt + R：切换正则匹配（Regex matching）模式 Ctrl + Shift + H：替换当前关键字 Ctrl + Alt + Enter：替换所有关键字匹配 Ctrl + Shift + F：多文件搜索\u0026替换 跳转（Jumping） Ctrl + P：跳转到指定文件，输入文件名后可以： @ 符号跳转：输入 @symbol 跳转到 symbol 符号所在的位置 # 关键字跳转：输入 #keyword 跳转到 keyword 所在的位置 : 行号跳转：输入 :12 跳转到文件的第12行。 Ctrl + R：跳转到指定符号 Ctrl + G：跳转到指定行号 窗口（Window） Ctrl + Shift + N：创建一个新窗口 Ctrl + N：在当前窗口创建一个新标签 Ctrl + W：关闭当前标签，当窗口内没有标签时会关闭该窗口 Ctrl + Shift + T：恢复刚刚关闭的标签 屏幕（Screen） F11：切换普通全屏 Shift + F11：切换无干扰全屏 Alt + Shift + 2：进行左右分屏 Alt + Shift + 8：进行上下分屏 Alt + Shift + 5：进行上下左右分屏 分屏之后，使用 Ctrl + 数字键 跳转到指定屏，使用 Ctrl + Shift + 数字键 将当前屏移动到指定屏。例如， Ctrl + 1 会跳转到1屏，而 Ctrl + Shift + 2 会将当前屏移动到2屏。 ","date":"2017-09-05","objectID":"/posts/sublime-text/:3:4","tags":["sublime text"],"title":"Sublime Text - 个人认为最好用的文本编辑器","uri":"/posts/sublime-text/"},{"categories":["玩乐随心"],"content":"常用插件 Markdown Editing 常用快捷键（Key Bindings） Ctrl + 1...6 1至6级标题 Ctrl + Win + V 或 Ctrl + Win + R 插入链接 Shift + Win + K 插入图片 Alt + Shift + 6 插入标注 代码段（Code Snippet） 输入 mdl + tab 会自动生成下面的链接标记 [](link) 输入 mdi + tab 会自动插入下面的图片标记 ![Alt text](/path/to/img.jpg \"Optional title\") ","date":"2017-09-05","objectID":"/posts/sublime-text/:4:0","tags":["sublime text"],"title":"Sublime Text - 个人认为最好用的文本编辑器","uri":"/posts/sublime-text/"},{"categories":["玩乐随心"],"content":"参考资料 官方文档：http://www.sublimetext.com/docs/3/ 官方论坛：http://www.sublimetext.com/forum/ Package Control：https://packagecontrol.io/ 大量的 Sublime Text 插件和主题。 《Sublime Text 全程指南》：http://zh.lucida.me/blog/sublime-text-complete-guide/ 《Sublime Text：学习资源篇》：http://www.jianshu.com/p/d1b9a64e2e37 ","date":"2017-09-05","objectID":"/posts/sublime-text/:5:0","tags":["sublime text"],"title":"Sublime Text - 个人认为最好用的文本编辑器","uri":"/posts/sublime-text/"},{"categories":["玩乐随心"],"content":"Hexo静态博客框架。 ","date":"2016-04-29","objectID":"/posts/build-hexo/:0:0","tags":["hexo"],"title":"Hexo - 借助GitHub搭建个人博客","uri":"/posts/build-hexo/"},{"categories":["玩乐随心"],"content":"前言 2017-09-05更新 一年多后，由于不再在封闭环境及云桌面办公，所以把Hexo得重新启用，打算用来做技术博客，或者叫Wiki，写一些自己的技术总结，按此前搭建的记录，部署起来。 有些日子没玩博客了，其实以前也一直很少去输出一些什么，但就是喜欢有一个属于个人的地方，向互联网展示一下自己的存在感！ I’m here，嗯，是这个意思！ 以前和网友一起合租过服务器，也在Godady买过域名，但最后还是没坚持下来，后来折腾完之后，最实用的反而是搭梯翻墙而已。 好了，再多的就不扯了，这篇就是为了记录下在Windows下用Hexo在GitHub上搭建个人博客的过程，希望可以对其他朋友有所帮助。 ","date":"2016-04-29","objectID":"/posts/build-hexo/:1:0","tags":["hexo"],"title":"Hexo - 借助GitHub搭建个人博客","uri":"/posts/build-hexo/"},{"categories":["玩乐随心"],"content":"简介 ","date":"2016-04-29","objectID":"/posts/build-hexo/:2:0","tags":["hexo"],"title":"Hexo - 借助GitHub搭建个人博客","uri":"/posts/build-hexo/"},{"categories":["玩乐随心"],"content":"Hexo是什么？ Hexo是一个很好的开源静态博客生成器，基于Node.js开发，作者是台湾大学生tommy351。 Hexo依赖于Git与Node.js环境，就是说，你要玩Hexo，就必须先得把环境搭好，才能一起玩耍！ ","date":"2016-04-29","objectID":"/posts/build-hexo/:2:1","tags":["hexo"],"title":"Hexo - 借助GitHub搭建个人博客","uri":"/posts/build-hexo/"},{"categories":["玩乐随心"],"content":"环境搭建 在Windows上装Git和Node.js都没什么好说的，和其它正常软件是一样的，就是下个安装包，双击打开，无脑下一步，默认选项即可，就完成了，下边附上下载包链接： ","date":"2016-04-29","objectID":"/posts/build-hexo/:3:0","tags":["hexo"],"title":"Hexo - 借助GitHub搭建个人博客","uri":"/posts/build-hexo/"},{"categories":["玩乐随心"],"content":"安装Git https://git-scm.com/ ","date":"2016-04-29","objectID":"/posts/build-hexo/:3:1","tags":["hexo"],"title":"Hexo - 借助GitHub搭建个人博客","uri":"/posts/build-hexo/"},{"categories":["玩乐随心"],"content":"安装Node.js https://nodejs.org/ 说明一下，下的是V6.11.2 LTS，长期支持版，而非最新的V8.4.0；非前端开发，没必要安装最新版。 ","date":"2016-04-29","objectID":"/posts/build-hexo/:3:2","tags":["hexo"],"title":"Hexo - 借助GitHub搭建个人博客","uri":"/posts/build-hexo/"},{"categories":["玩乐随心"],"content":"安装Hexo 正主来了，这个开始就要学会使用Git Bash来运行了！ 如果安装的时候选择了集成到Windows的CMD中，打开CMD运行也是可行的。 带上了参数-g就是全局安装，所以不用纠结是在哪个目录下运行命令。 $ npm install hexo-cli -g 初始化（若非首次安装，不需要） 初始化有2种方式，下边以blog文件夹为例，初始化完还需要在文件夹里安装包依赖： 直接指定目录 $ hexo init blog 进入指定目录 $ cd blog $ hexo init 终端执行命令后显示的结果： [info] Copying data[info] You are almost done! Don't forget to run `npm install` before start blogging with Hexo! 依赖安装 安装包依赖 $ cd blog $ npm install ","date":"2016-04-29","objectID":"/posts/build-hexo/:3:3","tags":["hexo"],"title":"Hexo - 借助GitHub搭建个人博客","uri":"/posts/build-hexo/"},{"categories":["玩乐随心"],"content":"部署 生成静态文件 $ hexo generate 启动本地调试环境 $ hexo server 至此，本地的环境算是完工了，你可以访问http://localhost:4000查看你的页面了！ ","date":"2016-04-29","objectID":"/posts/build-hexo/:4:0","tags":["hexo"],"title":"Hexo - 借助GitHub搭建个人博客","uri":"/posts/build-hexo/"},{"categories":["玩乐随心"],"content":"定制配置 在Hexo 3.0版本后deploy-git1被分开的，所以需要安装，安装命令如下： $ npm install hexo-deployer-git --save 增加RSS订阅2，需要安装，命令如下： $ npm install hexo-generator-feed --save 站点配置文件_config.yml增加配置如下： # Feed feed: type: atom path: atom.xml limit: 20 hub: GitHub Pages 自定义404页面非常容易，直接在source根目录下创建自己的404.html就可以，代码如下： \u003c!DOCTYPE HTML\u003e \u003chtml\u003e \u003chead\u003e \u003cmeta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/\u003e \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" /\u003e \u003cmeta name=\"robots\" content=\"all\" /\u003e \u003cmeta name=\"robots\" content=\"index,follow\"/\u003e \u003c/head\u003e \u003cbody\u003e \u003cscript type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://qiuzhi.github.io/\" homePageName=\"回到我的主页\"\u003e \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e 增加disqus评论 到官网注册并配置账号，得到shortname 在主题配置文件_config.yml相应位置修改如下： # Disqus disqus: enable: true shortname: shortname count: true 文章链接唯一化 也许你会数次更改文章题目或者变更文章发布时间，在默认设置下，文章链接都会改变，不利于搜索引擎收录，也不利于分享。唯一永久链接才是更好的选择。 安装 npm install hexo-abbrlink --save 在站点配置文件中查找代码permalink，将其更改为: permalink: posts/:abbrlink/ # “posts/” 可自行更换 这里有个知识点： 百度蜘蛛抓取网页的规则: 对于蜘蛛说网页权重越高、信用度越高抓取越频繁，例如网站的首页和内页。蜘蛛先抓取网站的首页，因为首页权重更高，并且大部分的链接都是指向首页。然后通过首页抓取网站的内页，并不是所有内页蜘蛛都会去抓取。 搜索引擎认为对于一般的中小型站点，3层足够承受所有的内容了，所以蜘蛛经常抓取的内容是前三层，而超过三层的内容蜘蛛认为那些内容并不重要，所以不经常爬取。出于这个原因所以permalink后面跟着的最好不要超过2个斜杠。 然后在站点配置文件中添加如下代码: # abbrlink config abbrlink: alg: crc32 # 算法：crc16(default) and crc32 rep: hex # 进制：dec(default) and hex 可选择模式： crc16 \u0026 hex crc16 \u0026 dec crc32 \u0026 hex crc32 \u0026 dec 可参照样例以选择： crc16 \u0026 hex https://post.zz173.com/posts/66c8.html crc16 \u0026 dec https://post.zz173.com/posts/65535.html crc32 \u0026 hex https://post.zz173.com/posts/8ddf18fb.html crc32 \u0026 dec https://post.zz173.com/posts/1690090958.html ","date":"2016-04-29","objectID":"/posts/build-hexo/:5:0","tags":["hexo"],"title":"Hexo - 借助GitHub搭建个人博客","uri":"/posts/build-hexo/"},{"categories":["玩乐随心"],"content":"发布到互联网 到GitHub注册 新建repository(仓库)，填写格式如下图所示: [yourusername].github.io 将[yourusername]换成你在GitHub注册的用户名！ 生成SSH Keys 如何让本地git项目与远程的github建立联系？需要用到SSH Keys！ 使用ssh-keygen命令生成密钥对 $ ssh-keygen -t rsa -C \"这里是你申请Github账号时的邮箱\" 然后系统会要你输入密码：（我们输入的密码会在你提交项目的时候使用） Enter passphrase (emptyforno passphrase):\u003c输入加密串\u003e Enter same passphrase again:\u003c再次输入加密串\u003e 从终端提示生成的文件路径中找到你生成的密钥找到id_rsa.pub用终端进入编辑，复制密钥。 添加SSH Key到GitHub 登陆GitHub网站，找到Setting-SSH and GPG keys，点击New SSH key按钮，将复制的密钥粘贴到Key栏；Title栏填上你喜欢的标识随意标记，然后保存即可。 验证SSH是否链通 $ ssh -T git@github.com 终端执行命令后显示的结果： Hi xxx! You've successfully authenticated, but GitHub does not provide shell access. 现在就已经可以通过SSH链接到Github了！ 别忘记设置提交信息 $ git config --global user.name \"xxx\" $ git config --global user.email \"xxx@xxx.com\" 打开站点配置文件，Hexo根目录下_config.yml： # Deployment ## Docs: https://hexo.io/docs/deployment.html deploy: type: git repository: https://github.com/yourusername/yourusername.github.io.git branch: master 将[yourusername]换成你在GitHub注册的用户名！ 发布到Github $ hexo deploy 至此，GitHub的环境算是完工了，你可以访问http://[yourusername].github.io查看你的页面了！ ","date":"2016-04-29","objectID":"/posts/build-hexo/:6:0","tags":["hexo"],"title":"Hexo - 借助GitHub搭建个人博客","uri":"/posts/build-hexo/"},{"categories":["玩乐随心"],"content":"维护 ","date":"2016-04-29","objectID":"/posts/build-hexo/:7:0","tags":["hexo"],"title":"Hexo - 借助GitHub搭建个人博客","uri":"/posts/build-hexo/"},{"categories":["玩乐随心"],"content":"环境信息 查看node.js的版本 $ node -v v6.11.2 查看node.js的版本 $ npm ls --depth 0 hexo-site@0.0.0 \\Hexo ├── hexo@3.3.8 ├── hexo-deployer-git@0.1.0 ├── hexo-generator-archive@0.1.4 ├── hexo-generator-category@0.1.3 ├── hexo-generator-feed@1.2.0 ├── hexo-generator-index@0.2.1 ├── hexo-generator-tag@0.2.0 ├── hexo-renderer-ejs@0.2.0 ├── hexo-renderer-marked@0.2.11 ├── hexo-renderer-stylus@0.3.3 ├── hexo-server@0.2.2 └── hexo-util@0.6.1 ","date":"2016-04-29","objectID":"/posts/build-hexo/:7:1","tags":["hexo"],"title":"Hexo - 借助GitHub搭建个人博客","uri":"/posts/build-hexo/"},{"categories":["玩乐随心"],"content":"依赖更新 在hexo site（_config.yml及package.json的资料夹）下 查看是否存在新旧版本 $ npm outdated 更新版本 $ npm update -S 更多请参考 npm文档 及 hexo文档 ","date":"2016-04-29","objectID":"/posts/build-hexo/:7:2","tags":["hexo"],"title":"Hexo - 借助GitHub搭建个人博客","uri":"/posts/build-hexo/"},{"categories":["玩乐随心"],"content":"过程中遇到的问题及解决 ","date":"2016-04-29","objectID":"/posts/build-hexo/:8:0","tags":["hexo"],"title":"Hexo - 借助GitHub搭建个人博客","uri":"/posts/build-hexo/"},{"categories":["玩乐随心"],"content":"问题一：Cannot find module ‘hexo-util’ 问题描述： ERROR Script load failed: themes/hexo-theme-next/scripts/tags/exturl.js Error: Cannot find module 'hexo-util' at Function.Module._resolveFilename (module.js:336:15) at Function.Module._load (module.js:286:25) at Module.require (module.js:365:17) at require (/data/github/hexo/node_modules/hexo/lib/hexo/index.js:213:21) at /data/github/hexo/themes/hexo-theme-next/scripts/tags/exturl.js:7:12 at /data/github/hexo/node_modules/hexo/lib/hexo/index.js:229:12 at tryCatcher (/data/github/hexo/node_modules/hexo/node_modules/bluebird/js/release/util.js:16:23) at Promise._settlePromiseFromHandler (/data/github/hexo/node_modules/hexo/node_modules/bluebird/js/release/promise.js:512:31) at Promise._settlePromise (/data/github/hexo/node_modules/hexo/node_modules/bluebird/js/release/promise.js:569:18) at Promise._settlePromise0 (/data/github/hexo/node_modules/hexo/node_modules/bluebird/js/release/promise.js:614:10) at Promise._settlePromises (/data/github/hexo/node_modules/hexo/node_modules/bluebird/js/release/promise.js:693:18) at Promise._fulfill (/data/github/hexo/node_modules/hexo/node_modules/bluebird/js/release/promise.js:638:18) at Promise._resolveCallback (/data/github/hexo/node_modules/hexo/node_modules/bluebird/js/release/promise.js:432:57) at Promise._settlePromiseFromHandler (/data/github/hexo/node_modules/hexo/node_modules/bluebird/js/release/promise.js:524:17) at Promise._settlePromise (/data/github/hexo/node_modules/hexo/node_modules/bluebird/js/release/promise.js:569:18) at Promise._settlePromise0 (/data/github/hexo/node_modules/hexo/node_modules/bluebird/js/release/promise.js:614:10) at Promise._settlePromises (/data/github/hexo/node_modules/hexo/node_modules/bluebird/js/release/promise.js:693:18) at Promise._fulfill (/data/github/hexo/node_modules/hexo/node_modules/bluebird/js/release/promise.js:638:18) at /data/github/hexo/node_modules/hexo/node_modules/bluebird/js/release/nodeback.js:42:21 at /data/github/hexo/node_modules/hexo/node_modules/hexo-fs/node_modules/graceful-fs/graceful-fs.js:78:16 at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:380:3) 解决方案 提示hexo-util找不到, 执行下面命令后就可以了 $ npm install hexo-util --save ","date":"2016-04-29","objectID":"/posts/build-hexo/:8:1","tags":["hexo"],"title":"Hexo - 借助GitHub搭建个人博客","uri":"/posts/build-hexo/"},{"categories":["玩乐随心"],"content":"问题二：could not read Username for ‘https://github.com’: Invalid argument 问题描述：Windows下更换Comder作为CMD终端后，遇到 nothing to commit, working tree clean bash: /dev/tty: No such device or address error: failed to execute prompt script (exit code 1) fatal: could not read Username for 'https://github.com': Invalid argument FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html Error: bash: /dev/tty: No such device or address error: failed to execute prompt script (exit code 1) fatal: could not read Username for 'https://github.com': Invalid argument at ChildProcess.\u003canonymous\u003e (E:\\Dropbox\\Hexo\\node_modules\\hexo-util\\lib\\spawn.js:37:17) at emitTwo (events.js:106:13) at ChildProcess.emit (events.js:191:7) at ChildProcess.cp.emit (E:\\Dropbox\\Hexo\\node_modules\\cross-spawn\\lib\\enoent.js:40:29) at maybeClose (internal/child_process.js:891:16) at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5) 解决方案 由于新手还不明白运行的机制，使用了Cmder自带的git工具，好像只能走ssh通道去更新。进行下边两步即可 那就先把hexo根目录下.deploy_git目录删除 修改_config.yml文件： repository: https://github.com/username/username.github.io.git 修改为 repository: git@github.com:username/username.github.io.git https://github.com/hexojs/hexo-deployer-git ↩︎ https://www.npmjs.com/package/hexo-generator-feed ↩︎ ","date":"2016-04-29","objectID":"/posts/build-hexo/:8:2","tags":["hexo"],"title":"Hexo - 借助GitHub搭建个人博客","uri":"/posts/build-hexo/"},{"categories":null,"content":"关于我 我叫邱志，80后程序猿， 毕业于广东工业大学， 现就职于广州一家小公司， 喜欢Java开发，其他各种业余， 兴趣广泛，技术领域的杂食动物。 ","date":"2016-04-28","objectID":"/about/:1:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"关于博客 自2007年起，陆续在各博客网站（新浪、CSDN）切换至独立博客（WordPress），但因当时未留意备份，故不作迁移， 从2016年4月起，始用Hexo+GitHub构建博客，用于记录日常一些技术学习总结及实践中的收获， 时间来到了2023年9月，弃用hexo，转到hugo， 争取每日有积累，每周有产出。 ","date":"2016-04-28","objectID":"/about/:2:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"本站内容 文章：全部文章列表，按照分类筛选。 #人间值得：生活是美好的，会记录生活琐事； #玩乐随心：折腾乐趣很多，分享工具与效率； #好读生花：阅读使我安静，分享心得和体会； #胡思乱想：平常想法较多，一本正经胡说八道。 ","date":"2016-04-28","objectID":"/about/:2:1","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"想法 坚信一名好的工程师，绝不仅仅是能够实现项目需求。 技术是一种信仰。 ","date":"2016-04-28","objectID":"/about/:3:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"联系我 Gmail：qiuyufeng@gmail.com ","date":"2016-04-28","objectID":"/about/:4:0","tags":null,"title":"关于","uri":"/about/"},{"categories":["hello"],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. ","date":"2016-04-28","objectID":"/posts/hexo-hello-world/:0:0","tags":["hello","hexo"],"title":"Hexo Hello World","uri":"/posts/hexo-hello-world/"},{"categories":["hello"],"content":"Quick Start ","date":"2016-04-28","objectID":"/posts/hexo-hello-world/:1:0","tags":["hello","hexo"],"title":"Hexo Hello World","uri":"/posts/hexo-hello-world/"},{"categories":["hello"],"content":"Create a new post $ hexo new \"My New Post\" More info: Writing ","date":"2016-04-28","objectID":"/posts/hexo-hello-world/:1:1","tags":["hello","hexo"],"title":"Hexo Hello World","uri":"/posts/hexo-hello-world/"},{"categories":["hello"],"content":"Run server $ hexo server More info: Server ","date":"2016-04-28","objectID":"/posts/hexo-hello-world/:1:2","tags":["hello","hexo"],"title":"Hexo Hello World","uri":"/posts/hexo-hello-world/"},{"categories":["hello"],"content":"Generate static files $ hexo generate More info: Generating ","date":"2016-04-28","objectID":"/posts/hexo-hello-world/:1:3","tags":["hello","hexo"],"title":"Hexo Hello World","uri":"/posts/hexo-hello-world/"},{"categories":["hello"],"content":"Deploy to remote sites $ hexo deploy More info: Deployment ","date":"2016-04-28","objectID":"/posts/hexo-hello-world/:1:4","tags":["hello","hexo"],"title":"Hexo Hello World","uri":"/posts/hexo-hello-world/"}]